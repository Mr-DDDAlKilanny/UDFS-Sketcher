//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 udfs.g3 1435-06-18 15:42:21

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace Sketcher.Udfs.Parser
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class udfsParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "COMMENT", "CONST", "ELSE", "FUNCTION_CALL", "FUNCTION_DECL", "GLOBAL", "IDINTIFIER", "IF", "LBRCT", "LPARN", "NLINE", "NUMBER", "RBRCT", "RET", "RPARN", "VAR", "WHILE", "WS", "'!='", "'%'", "'&'", "'*'", "'+'", "','", "'-'", "'/'", "':='", "'<'", "'<='", "'='", "'>'", "'>='", "'^'", "'|'"
	};
	public const int EOF=-1;
	public const int COMMENT=4;
	public const int CONST=5;
	public const int ELSE=6;
	public const int FUNCTION_CALL=7;
	public const int FUNCTION_DECL=8;
	public const int GLOBAL=9;
	public const int IDINTIFIER=10;
	public const int IF=11;
	public const int LBRCT=12;
	public const int LPARN=13;
	public const int NLINE=14;
	public const int NUMBER=15;
	public const int RBRCT=16;
	public const int RET=17;
	public const int RPARN=18;
	public const int VAR=19;
	public const int WHILE=20;
	public const int WS=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;

	public udfsParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public udfsParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return udfsParser.tokenNames; } }
	public override string GrammarFileName { get { return "udfs.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_compileUnit();
	partial void LeaveRule_compileUnit();
	// $ANTLR start "compileUnit"
	// udfs.g3:35:1: public compileUnit : ( constDeclarations | globalDeclarations | functionDeclaration | WS | NLINE )* EOF ;
	[GrammarRule("compileUnit")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> compileUnit()
	{
		EnterRule_compileUnit();
		EnterRule("compileUnit", 1);
		TraceIn("compileUnit", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WS4 = default(CommonToken);
		CommonToken NLINE5 = default(CommonToken);
		CommonToken EOF6 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> constDeclarations1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> globalDeclarations2 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> functionDeclaration3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WS4_tree = default(CommonTree);
		CommonTree NLINE5_tree = default(CommonTree);
		CommonTree EOF6_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "compileUnit");
		DebugLocation(35, 1);
		try
		{
			// udfs.g3:36:5: ( ( constDeclarations | globalDeclarations | functionDeclaration | WS | NLINE )* EOF )
			DebugEnterAlt(1);
			// udfs.g3:37:2: ( constDeclarations | globalDeclarations | functionDeclaration | WS | NLINE )* EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(37, 2);
			// udfs.g3:37:2: ( constDeclarations | globalDeclarations | functionDeclaration | WS | NLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=6;
				try { DebugEnterDecision(1, false);
				switch (input.LA(1))
				{
				case CONST:
					{
					alt1 = 1;
					}
					break;
				case GLOBAL:
					{
					alt1 = 2;
					}
					break;
				case FUNCTION_DECL:
					{
					alt1 = 3;
					}
					break;
				case WS:
					{
					alt1 = 4;
					}
					break;
				case NLINE:
					{
					alt1 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:37:3: constDeclarations
					{
					DebugLocation(37, 3);
					PushFollow(Follow._constDeclarations_in_compileUnit163);
					constDeclarations1=constDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constDeclarations1.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// udfs.g3:38:4: globalDeclarations
					{
					DebugLocation(38, 4);
					PushFollow(Follow._globalDeclarations_in_compileUnit168);
					globalDeclarations2=globalDeclarations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, globalDeclarations2.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// udfs.g3:39:4: functionDeclaration
					{
					DebugLocation(39, 4);
					PushFollow(Follow._functionDeclaration_in_compileUnit173);
					functionDeclaration3=functionDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionDeclaration3.Tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// udfs.g3:40:4: WS
					{
					DebugLocation(40, 4);
					WS4=(CommonToken)Match(input,WS,Follow._WS_in_compileUnit178); if (state.failed) return retval;
					if (state.backtracking == 0) {
					WS4_tree = (CommonTree)adaptor.Create(WS4);
					adaptor.AddChild(root_0, WS4_tree);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// udfs.g3:41:4: NLINE
					{
					DebugLocation(41, 4);
					NLINE5=(CommonToken)Match(input,NLINE,Follow._NLINE_in_compileUnit183); if (state.failed) return retval;
					if (state.backtracking == 0) {
					NLINE5_tree = (CommonTree)adaptor.Create(NLINE5);
					adaptor.AddChild(root_0, NLINE5_tree);
					}

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(43, 2);
			EOF6=(CommonToken)Match(input,EOF,Follow._EOF_in_compileUnit190); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EOF6_tree = (CommonTree)adaptor.Create(EOF6);
			adaptor.AddChild(root_0, EOF6_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compileUnit", 1);
			LeaveRule("compileUnit", 1);
			LeaveRule_compileUnit();
		}
		DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "compileUnit"); }
		return retval;

	}
	// $ANTLR end "compileUnit"

	partial void EnterRule_constDeclarations();
	partial void LeaveRule_constDeclarations();
	// $ANTLR start "constDeclarations"
	// udfs.g3:46:1: constDeclarations : CONST ( WS )+ i+= constDeclaration ( ( WS )* ',' ( WS )* i+= constDeclaration )* -> ^( CONST ( $i)+ ) ;
	[GrammarRule("constDeclarations")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> constDeclarations()
	{
		EnterRule_constDeclarations();
		EnterRule("constDeclarations", 2);
		TraceIn("constDeclarations", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CONST7 = default(CommonToken);
		CommonToken WS8 = default(CommonToken);
		CommonToken WS9 = default(CommonToken);
		CommonToken char_literal10 = default(CommonToken);
		CommonToken WS11 = default(CommonToken);
		List<CommonTree> list_i = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> i = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree CONST7_tree = default(CommonTree);
		CommonTree WS8_tree = default(CommonTree);
		CommonTree WS9_tree = default(CommonTree);
		CommonTree char_literal10_tree = default(CommonTree);
		CommonTree WS11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CONST=new RewriteRuleITokenStream(adaptor,"token CONST");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_27=new RewriteRuleITokenStream(adaptor,"token 27");
		RewriteRuleSubtreeStream stream_constDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule constDeclaration");
		try { DebugEnterRule(GrammarFileName, "constDeclarations");
		DebugLocation(46, 1);
		try
		{
			// udfs.g3:46:18: ( CONST ( WS )+ i+= constDeclaration ( ( WS )* ',' ( WS )* i+= constDeclaration )* -> ^( CONST ( $i)+ ) )
			DebugEnterAlt(1);
			// udfs.g3:47:2: CONST ( WS )+ i+= constDeclaration ( ( WS )* ',' ( WS )* i+= constDeclaration )*
			{
			DebugLocation(47, 2);
			CONST7=(CommonToken)Match(input,CONST,Follow._CONST_in_constDeclarations200); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CONST.Add(CONST7);

			DebugLocation(47, 8);
			// udfs.g3:47:8: ( WS )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==WS))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:47:8: WS
					{
					DebugLocation(47, 8);
					WS8=(CommonToken)Match(input,WS,Follow._WS_in_constDeclarations202); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS8);


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(47, 13);
			PushFollow(Follow._constDeclaration_in_constDeclarations207);
			i=constDeclaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_constDeclaration.Add(i.Tree);
			if (list_i==null) list_i=new List<CommonTree>();
			list_i.Add(i.Tree);

			DebugLocation(47, 32);
			// udfs.g3:47:32: ( ( WS )* ',' ( WS )* i+= constDeclaration )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				try
				{
					alt5 = dfa5.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:47:33: ( WS )* ',' ( WS )* i+= constDeclaration
					{
					DebugLocation(47, 33);
					// udfs.g3:47:33: ( WS )*
					try { DebugEnterSubRule(3);
					while (true)
					{
						int alt3=2;
						try { DebugEnterDecision(3, false);
						int LA3_1 = input.LA(1);

						if ((LA3_1==WS))
						{
							alt3 = 1;
						}


						} finally { DebugExitDecision(3); }
						switch ( alt3 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:47:33: WS
							{
							DebugLocation(47, 33);
							WS9=(CommonToken)Match(input,WS,Follow._WS_in_constDeclarations210); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS9);


							}
							break;

						default:
							goto loop3;
						}
					}

					loop3:
						;

					} finally { DebugExitSubRule(3); }

					DebugLocation(47, 37);
					char_literal10=(CommonToken)Match(input,27,Follow._27_in_constDeclarations213); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_27.Add(char_literal10);

					DebugLocation(47, 41);
					// udfs.g3:47:41: ( WS )*
					try { DebugEnterSubRule(4);
					while (true)
					{
						int alt4=2;
						try { DebugEnterDecision(4, false);
						int LA4_1 = input.LA(1);

						if ((LA4_1==WS))
						{
							alt4 = 1;
						}


						} finally { DebugExitDecision(4); }
						switch ( alt4 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:47:41: WS
							{
							DebugLocation(47, 41);
							WS11=(CommonToken)Match(input,WS,Follow._WS_in_constDeclarations215); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS11);


							}
							break;

						default:
							goto loop4;
						}
					}

					loop4:
						;

					} finally { DebugExitSubRule(4); }

					DebugLocation(47, 46);
					PushFollow(Follow._constDeclaration_in_constDeclarations220);
					i=constDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_constDeclaration.Add(i.Tree);
					if (list_i==null) list_i=new List<CommonTree>();
					list_i.Add(i.Tree);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }



			{
			// AST REWRITE
			// elements: CONST, i
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: i
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
			root_0 = (CommonTree)adaptor.Nil();
			// 48:2: -> ^( CONST ( $i)+ )
			{
				DebugLocation(48, 5);
				// udfs.g3:48:5: ^( CONST ( $i)+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(48, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_CONST.NextNode(), root_1);

				DebugLocation(48, 14);
				if (!(stream_i.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_i.HasNext )
				{
					DebugLocation(48, 14);
					adaptor.AddChild(root_1, stream_i.NextTree());

				}
				stream_i.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constDeclarations", 2);
			LeaveRule("constDeclarations", 2);
			LeaveRule_constDeclarations();
		}
		DebugLocation(49, 1);
		} finally { DebugExitRule(GrammarFileName, "constDeclarations"); }
		return retval;

	}
	// $ANTLR end "constDeclarations"

	partial void EnterRule_globalDeclarations();
	partial void LeaveRule_globalDeclarations();
	// $ANTLR start "globalDeclarations"
	// udfs.g3:51:1: globalDeclarations : GLOBAL ( WS )+ i+= IDINTIFIER ( ( WS )* ',' ( WS )* i+= IDINTIFIER )* -> ^( GLOBAL ( $i)+ ) ;
	[GrammarRule("globalDeclarations")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> globalDeclarations()
	{
		EnterRule_globalDeclarations();
		EnterRule("globalDeclarations", 3);
		TraceIn("globalDeclarations", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken GLOBAL12 = default(CommonToken);
		CommonToken WS13 = default(CommonToken);
		CommonToken WS14 = default(CommonToken);
		CommonToken char_literal15 = default(CommonToken);
		CommonToken WS16 = default(CommonToken);
		CommonToken i = default(CommonToken);
		List<CommonToken> list_i = null;

		CommonTree GLOBAL12_tree = default(CommonTree);
		CommonTree WS13_tree = default(CommonTree);
		CommonTree WS14_tree = default(CommonTree);
		CommonTree char_literal15_tree = default(CommonTree);
		CommonTree WS16_tree = default(CommonTree);
		CommonTree i_tree = default(CommonTree);
		RewriteRuleITokenStream stream_GLOBAL=new RewriteRuleITokenStream(adaptor,"token GLOBAL");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_IDINTIFIER=new RewriteRuleITokenStream(adaptor,"token IDINTIFIER");
		RewriteRuleITokenStream stream_27=new RewriteRuleITokenStream(adaptor,"token 27");
		try { DebugEnterRule(GrammarFileName, "globalDeclarations");
		DebugLocation(51, 1);
		try
		{
			// udfs.g3:51:19: ( GLOBAL ( WS )+ i+= IDINTIFIER ( ( WS )* ',' ( WS )* i+= IDINTIFIER )* -> ^( GLOBAL ( $i)+ ) )
			DebugEnterAlt(1);
			// udfs.g3:52:2: GLOBAL ( WS )+ i+= IDINTIFIER ( ( WS )* ',' ( WS )* i+= IDINTIFIER )*
			{
			DebugLocation(52, 2);
			GLOBAL12=(CommonToken)Match(input,GLOBAL,Follow._GLOBAL_in_globalDeclarations243); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_GLOBAL.Add(GLOBAL12);

			DebugLocation(52, 9);
			// udfs.g3:52:9: ( WS )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==WS))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:52:9: WS
					{
					DebugLocation(52, 9);
					WS13=(CommonToken)Match(input,WS,Follow._WS_in_globalDeclarations245); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS13);


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(52, 14);
			i=(CommonToken)Match(input,IDINTIFIER,Follow._IDINTIFIER_in_globalDeclarations250); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDINTIFIER.Add(i);

			if (list_i==null) list_i=new List<CommonToken>();
			list_i.Add(i);

			DebugLocation(52, 27);
			// udfs.g3:52:27: ( ( WS )* ',' ( WS )* i+= IDINTIFIER )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				try
				{
					alt9 = dfa9.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:52:28: ( WS )* ',' ( WS )* i+= IDINTIFIER
					{
					DebugLocation(52, 28);
					// udfs.g3:52:28: ( WS )*
					try { DebugEnterSubRule(7);
					while (true)
					{
						int alt7=2;
						try { DebugEnterDecision(7, false);
						int LA7_1 = input.LA(1);

						if ((LA7_1==WS))
						{
							alt7 = 1;
						}


						} finally { DebugExitDecision(7); }
						switch ( alt7 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:52:28: WS
							{
							DebugLocation(52, 28);
							WS14=(CommonToken)Match(input,WS,Follow._WS_in_globalDeclarations253); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS14);


							}
							break;

						default:
							goto loop7;
						}
					}

					loop7:
						;

					} finally { DebugExitSubRule(7); }

					DebugLocation(52, 32);
					char_literal15=(CommonToken)Match(input,27,Follow._27_in_globalDeclarations256); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_27.Add(char_literal15);

					DebugLocation(52, 36);
					// udfs.g3:52:36: ( WS )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_1 = input.LA(1);

						if ((LA8_1==WS))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:52:36: WS
							{
							DebugLocation(52, 36);
							WS16=(CommonToken)Match(input,WS,Follow._WS_in_globalDeclarations258); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS16);


							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(52, 41);
					i=(CommonToken)Match(input,IDINTIFIER,Follow._IDINTIFIER_in_globalDeclarations263); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDINTIFIER.Add(i);

					if (list_i==null) list_i=new List<CommonToken>();
					list_i.Add(i);


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: GLOBAL, i
			// token labels: 
			// rule labels: retval
			// token list labels: i
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_i=new RewriteRuleITokenStream(adaptor,"token i", list_i);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 53:2: -> ^( GLOBAL ( $i)+ )
			{
				DebugLocation(53, 5);
				// udfs.g3:53:5: ^( GLOBAL ( $i)+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(53, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_GLOBAL.NextNode(), root_1);

				DebugLocation(53, 15);
				if (!(stream_i.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_i.HasNext )
				{
					DebugLocation(53, 15);
					adaptor.AddChild(root_1, stream_i.NextNode());

				}
				stream_i.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("globalDeclarations", 3);
			LeaveRule("globalDeclarations", 3);
			LeaveRule_globalDeclarations();
		}
		DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "globalDeclarations"); }
		return retval;

	}
	// $ANTLR end "globalDeclarations"

	partial void EnterRule_constDeclaration();
	partial void LeaveRule_constDeclaration();
	// $ANTLR start "constDeclaration"
	// udfs.g3:56:1: constDeclaration : IDINTIFIER ( WS )* ':=' ( WS )* NUMBER -> ^( IDINTIFIER NUMBER ) ;
	[GrammarRule("constDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> constDeclaration()
	{
		EnterRule_constDeclaration();
		EnterRule("constDeclaration", 4);
		TraceIn("constDeclaration", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDINTIFIER17 = default(CommonToken);
		CommonToken WS18 = default(CommonToken);
		CommonToken string_literal19 = default(CommonToken);
		CommonToken WS20 = default(CommonToken);
		CommonToken NUMBER21 = default(CommonToken);

		CommonTree IDINTIFIER17_tree = default(CommonTree);
		CommonTree WS18_tree = default(CommonTree);
		CommonTree string_literal19_tree = default(CommonTree);
		CommonTree WS20_tree = default(CommonTree);
		CommonTree NUMBER21_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDINTIFIER=new RewriteRuleITokenStream(adaptor,"token IDINTIFIER");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_30=new RewriteRuleITokenStream(adaptor,"token 30");
		RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
		try { DebugEnterRule(GrammarFileName, "constDeclaration");
		DebugLocation(56, 1);
		try
		{
			// udfs.g3:56:17: ( IDINTIFIER ( WS )* ':=' ( WS )* NUMBER -> ^( IDINTIFIER NUMBER ) )
			DebugEnterAlt(1);
			// udfs.g3:57:2: IDINTIFIER ( WS )* ':=' ( WS )* NUMBER
			{
			DebugLocation(57, 2);
			IDINTIFIER17=(CommonToken)Match(input,IDINTIFIER,Follow._IDINTIFIER_in_constDeclaration286); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDINTIFIER.Add(IDINTIFIER17);

			DebugLocation(57, 13);
			// udfs.g3:57:13: ( WS )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==WS))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:57:13: WS
					{
					DebugLocation(57, 13);
					WS18=(CommonToken)Match(input,WS,Follow._WS_in_constDeclaration288); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS18);


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(57, 17);
			string_literal19=(CommonToken)Match(input,30,Follow._30_in_constDeclaration291); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_30.Add(string_literal19);

			DebugLocation(57, 22);
			// udfs.g3:57:22: ( WS )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==WS))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:57:22: WS
					{
					DebugLocation(57, 22);
					WS20=(CommonToken)Match(input,WS,Follow._WS_in_constDeclaration293); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS20);


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(57, 26);
			NUMBER21=(CommonToken)Match(input,NUMBER,Follow._NUMBER_in_constDeclaration296); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NUMBER.Add(NUMBER21);



			{
			// AST REWRITE
			// elements: IDINTIFIER, NUMBER
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 58:2: -> ^( IDINTIFIER NUMBER )
			{
				DebugLocation(58, 5);
				// udfs.g3:58:5: ^( IDINTIFIER NUMBER )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(58, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_IDINTIFIER.NextNode(), root_1);

				DebugLocation(58, 18);
				adaptor.AddChild(root_1, stream_NUMBER.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constDeclaration", 4);
			LeaveRule("constDeclaration", 4);
			LeaveRule_constDeclaration();
		}
		DebugLocation(59, 1);
		} finally { DebugExitRule(GrammarFileName, "constDeclaration"); }
		return retval;

	}
	// $ANTLR end "constDeclaration"

	partial void EnterRule_functionDeclaration();
	partial void LeaveRule_functionDeclaration();
	// $ANTLR start "functionDeclaration"
	// udfs.g3:61:1: functionDeclaration : FUNCTION_DECL ( WS )+ IDINTIFIER ( WS )* LPARN ( WS )* (i+= IDINTIFIER ( ( WS )* ',' ( WS )* i+= IDINTIFIER )* )? RPARN ( WS | NLINE )* blockStatement -> ^( FUNCTION_DECL IDINTIFIER ^( LPARN ( $i)* ) blockStatement ) ;
	[GrammarRule("functionDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> functionDeclaration()
	{
		EnterRule_functionDeclaration();
		EnterRule("functionDeclaration", 5);
		TraceIn("functionDeclaration", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken FUNCTION_DECL22 = default(CommonToken);
		CommonToken WS23 = default(CommonToken);
		CommonToken IDINTIFIER24 = default(CommonToken);
		CommonToken WS25 = default(CommonToken);
		CommonToken LPARN26 = default(CommonToken);
		CommonToken WS27 = default(CommonToken);
		CommonToken WS28 = default(CommonToken);
		CommonToken char_literal29 = default(CommonToken);
		CommonToken WS30 = default(CommonToken);
		CommonToken RPARN31 = default(CommonToken);
		CommonToken WS32 = default(CommonToken);
		CommonToken NLINE33 = default(CommonToken);
		CommonToken i = default(CommonToken);
		List<CommonToken> list_i = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> blockStatement34 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree FUNCTION_DECL22_tree = default(CommonTree);
		CommonTree WS23_tree = default(CommonTree);
		CommonTree IDINTIFIER24_tree = default(CommonTree);
		CommonTree WS25_tree = default(CommonTree);
		CommonTree LPARN26_tree = default(CommonTree);
		CommonTree WS27_tree = default(CommonTree);
		CommonTree WS28_tree = default(CommonTree);
		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree WS30_tree = default(CommonTree);
		CommonTree RPARN31_tree = default(CommonTree);
		CommonTree WS32_tree = default(CommonTree);
		CommonTree NLINE33_tree = default(CommonTree);
		CommonTree i_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FUNCTION_DECL=new RewriteRuleITokenStream(adaptor,"token FUNCTION_DECL");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_IDINTIFIER=new RewriteRuleITokenStream(adaptor,"token IDINTIFIER");
		RewriteRuleITokenStream stream_LPARN=new RewriteRuleITokenStream(adaptor,"token LPARN");
		RewriteRuleITokenStream stream_27=new RewriteRuleITokenStream(adaptor,"token 27");
		RewriteRuleITokenStream stream_RPARN=new RewriteRuleITokenStream(adaptor,"token RPARN");
		RewriteRuleITokenStream stream_NLINE=new RewriteRuleITokenStream(adaptor,"token NLINE");
		RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
		try { DebugEnterRule(GrammarFileName, "functionDeclaration");
		DebugLocation(61, 1);
		try
		{
			// udfs.g3:61:20: ( FUNCTION_DECL ( WS )+ IDINTIFIER ( WS )* LPARN ( WS )* (i+= IDINTIFIER ( ( WS )* ',' ( WS )* i+= IDINTIFIER )* )? RPARN ( WS | NLINE )* blockStatement -> ^( FUNCTION_DECL IDINTIFIER ^( LPARN ( $i)* ) blockStatement ) )
			DebugEnterAlt(1);
			// udfs.g3:62:2: FUNCTION_DECL ( WS )+ IDINTIFIER ( WS )* LPARN ( WS )* (i+= IDINTIFIER ( ( WS )* ',' ( WS )* i+= IDINTIFIER )* )? RPARN ( WS | NLINE )* blockStatement
			{
			DebugLocation(62, 2);
			FUNCTION_DECL22=(CommonToken)Match(input,FUNCTION_DECL,Follow._FUNCTION_DECL_in_functionDeclaration315); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FUNCTION_DECL.Add(FUNCTION_DECL22);

			DebugLocation(62, 16);
			// udfs.g3:62:16: ( WS )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==WS))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:62:16: WS
					{
					DebugLocation(62, 16);
					WS23=(CommonToken)Match(input,WS,Follow._WS_in_functionDeclaration317); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS23);


					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(62, 20);
			IDINTIFIER24=(CommonToken)Match(input,IDINTIFIER,Follow._IDINTIFIER_in_functionDeclaration320); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDINTIFIER.Add(IDINTIFIER24);

			DebugLocation(62, 31);
			// udfs.g3:62:31: ( WS )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==WS))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:62:31: WS
					{
					DebugLocation(62, 31);
					WS25=(CommonToken)Match(input,WS,Follow._WS_in_functionDeclaration322); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS25);


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(63, 2);
			LPARN26=(CommonToken)Match(input,LPARN,Follow._LPARN_in_functionDeclaration326); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPARN.Add(LPARN26);

			DebugLocation(64, 2);
			// udfs.g3:64:2: ( WS )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==WS))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:64:2: WS
					{
					DebugLocation(64, 2);
					WS27=(CommonToken)Match(input,WS,Follow._WS_in_functionDeclaration329); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS27);


					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(64, 6);
			// udfs.g3:64:6: (i+= IDINTIFIER ( ( WS )* ',' ( WS )* i+= IDINTIFIER )* )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==IDINTIFIER))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// udfs.g3:64:7: i+= IDINTIFIER ( ( WS )* ',' ( WS )* i+= IDINTIFIER )*
				{
				DebugLocation(64, 8);
				i=(CommonToken)Match(input,IDINTIFIER,Follow._IDINTIFIER_in_functionDeclaration335); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDINTIFIER.Add(i);

				if (list_i==null) list_i=new List<CommonToken>();
				list_i.Add(i);

				DebugLocation(64, 21);
				// udfs.g3:64:21: ( ( WS )* ',' ( WS )* i+= IDINTIFIER )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_1 = input.LA(1);

					if ((LA17_1==WS||LA17_1==27))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// udfs.g3:64:22: ( WS )* ',' ( WS )* i+= IDINTIFIER
						{
						DebugLocation(64, 22);
						// udfs.g3:64:22: ( WS )*
						try { DebugEnterSubRule(15);
						while (true)
						{
							int alt15=2;
							try { DebugEnterDecision(15, false);
							int LA15_1 = input.LA(1);

							if ((LA15_1==WS))
							{
								alt15 = 1;
							}


							} finally { DebugExitDecision(15); }
							switch ( alt15 )
							{
							case 1:
								DebugEnterAlt(1);
								// udfs.g3:64:22: WS
								{
								DebugLocation(64, 22);
								WS28=(CommonToken)Match(input,WS,Follow._WS_in_functionDeclaration338); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS28);


								}
								break;

							default:
								goto loop15;
							}
						}

						loop15:
							;

						} finally { DebugExitSubRule(15); }

						DebugLocation(64, 26);
						char_literal29=(CommonToken)Match(input,27,Follow._27_in_functionDeclaration341); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_27.Add(char_literal29);

						DebugLocation(64, 30);
						// udfs.g3:64:30: ( WS )*
						try { DebugEnterSubRule(16);
						while (true)
						{
							int alt16=2;
							try { DebugEnterDecision(16, false);
							int LA16_1 = input.LA(1);

							if ((LA16_1==WS))
							{
								alt16 = 1;
							}


							} finally { DebugExitDecision(16); }
							switch ( alt16 )
							{
							case 1:
								DebugEnterAlt(1);
								// udfs.g3:64:30: WS
								{
								DebugLocation(64, 30);
								WS30=(CommonToken)Match(input,WS,Follow._WS_in_functionDeclaration343); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS30);


								}
								break;

							default:
								goto loop16;
							}
						}

						loop16:
							;

						} finally { DebugExitSubRule(16); }

						DebugLocation(64, 35);
						i=(CommonToken)Match(input,IDINTIFIER,Follow._IDINTIFIER_in_functionDeclaration348); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IDINTIFIER.Add(i);

						if (list_i==null) list_i=new List<CommonToken>();
						list_i.Add(i);


						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(65, 2);
			RPARN31=(CommonToken)Match(input,RPARN,Follow._RPARN_in_functionDeclaration355); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPARN.Add(RPARN31);

			DebugLocation(66, 2);
			// udfs.g3:66:2: ( WS | NLINE )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=3;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==WS))
				{
					alt19 = 1;
				}
				else if ((LA19_1==NLINE))
				{
					alt19 = 2;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:66:3: WS
					{
					DebugLocation(66, 3);
					WS32=(CommonToken)Match(input,WS,Follow._WS_in_functionDeclaration359); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS32);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// udfs.g3:66:8: NLINE
					{
					DebugLocation(66, 8);
					NLINE33=(CommonToken)Match(input,NLINE,Follow._NLINE_in_functionDeclaration363); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NLINE.Add(NLINE33);


					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(67, 2);
			PushFollow(Follow._blockStatement_in_functionDeclaration368);
			blockStatement34=blockStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_blockStatement.Add(blockStatement34.Tree);


			{
			// AST REWRITE
			// elements: FUNCTION_DECL, IDINTIFIER, LPARN, i, blockStatement
			// token labels: 
			// rule labels: retval
			// token list labels: i
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_i=new RewriteRuleITokenStream(adaptor,"token i", list_i);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 68:2: -> ^( FUNCTION_DECL IDINTIFIER ^( LPARN ( $i)* ) blockStatement )
			{
				DebugLocation(68, 5);
				// udfs.g3:68:5: ^( FUNCTION_DECL IDINTIFIER ^( LPARN ( $i)* ) blockStatement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(68, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_FUNCTION_DECL.NextNode(), root_1);

				DebugLocation(68, 21);
				adaptor.AddChild(root_1, stream_IDINTIFIER.NextNode());
				DebugLocation(68, 32);
				// udfs.g3:68:32: ^( LPARN ( $i)* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(68, 34);
				root_2 = (CommonTree)adaptor.BecomeRoot(stream_LPARN.NextNode(), root_2);

				DebugLocation(68, 41);
				// udfs.g3:68:41: ( $i)*
				while ( stream_i.HasNext )
				{
					DebugLocation(68, 41);
					adaptor.AddChild(root_2, stream_i.NextNode());

				}
				stream_i.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(68, 45);
				adaptor.AddChild(root_1, stream_blockStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDeclaration", 5);
			LeaveRule("functionDeclaration", 5);
			LeaveRule_functionDeclaration();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDeclaration"); }
		return retval;

	}
	// $ANTLR end "functionDeclaration"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// udfs.g3:71:1: blockStatement : ( ( LBRCT )=> block | statement );
	[GrammarRule("blockStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 6);
		TraceIn("blockStatement", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> block35 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement36 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(71, 1);
		try
		{
			// udfs.g3:71:15: ( ( LBRCT )=> block | statement )
			int alt20=2;
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==LBRCT) && (EvaluatePredicate(synpred1_udfs_fragment)))
			{
				alt20 = 1;
			}
			else if (((LA20_1>=IDINTIFIER && LA20_1<=IF)||LA20_1==RET||LA20_1==WHILE))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// udfs.g3:72:2: ( LBRCT )=> block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(72, 13);
				PushFollow(Follow._block_in_blockStatement403);
				block35=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block35.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// udfs.g3:73:4: statement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(73, 4);
				PushFollow(Follow._statement_in_blockStatement408);
				statement36=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement36.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blockStatement", 6);
			LeaveRule("blockStatement", 6);
			LeaveRule_blockStatement();
		}
		DebugLocation(74, 1);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return retval;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// udfs.g3:76:1: block : LBRCT ( WS | NLINE )* ( varDeclarations )? ( WS | NLINE )* (i+= statement | WS | NLINE )* RBRCT -> ^( LBRCT ( varDeclarations )? ( $i)* RBRCT ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 7);
		TraceIn("block", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LBRCT37 = default(CommonToken);
		CommonToken WS38 = default(CommonToken);
		CommonToken NLINE39 = default(CommonToken);
		CommonToken WS41 = default(CommonToken);
		CommonToken NLINE42 = default(CommonToken);
		CommonToken WS43 = default(CommonToken);
		CommonToken NLINE44 = default(CommonToken);
		CommonToken RBRCT45 = default(CommonToken);
		List<CommonTree> list_i = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> varDeclarations40 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> i = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree LBRCT37_tree = default(CommonTree);
		CommonTree WS38_tree = default(CommonTree);
		CommonTree NLINE39_tree = default(CommonTree);
		CommonTree WS41_tree = default(CommonTree);
		CommonTree NLINE42_tree = default(CommonTree);
		CommonTree WS43_tree = default(CommonTree);
		CommonTree NLINE44_tree = default(CommonTree);
		CommonTree RBRCT45_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LBRCT=new RewriteRuleITokenStream(adaptor,"token LBRCT");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_NLINE=new RewriteRuleITokenStream(adaptor,"token NLINE");
		RewriteRuleITokenStream stream_RBRCT=new RewriteRuleITokenStream(adaptor,"token RBRCT");
		RewriteRuleSubtreeStream stream_varDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule varDeclarations");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(76, 1);
		try
		{
			// udfs.g3:76:6: ( LBRCT ( WS | NLINE )* ( varDeclarations )? ( WS | NLINE )* (i+= statement | WS | NLINE )* RBRCT -> ^( LBRCT ( varDeclarations )? ( $i)* RBRCT ) )
			DebugEnterAlt(1);
			// udfs.g3:77:2: LBRCT ( WS | NLINE )* ( varDeclarations )? ( WS | NLINE )* (i+= statement | WS | NLINE )* RBRCT
			{
			DebugLocation(77, 2);
			LBRCT37=(CommonToken)Match(input,LBRCT,Follow._LBRCT_in_block418); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LBRCT.Add(LBRCT37);

			DebugLocation(78, 2);
			// udfs.g3:78:2: ( WS | NLINE )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=3;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==WS))
				{
					alt21 = 1;
				}
				else if ((LA21_1==NLINE))
				{
					alt21 = 2;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:78:3: WS
					{
					DebugLocation(78, 3);
					WS38=(CommonToken)Match(input,WS,Follow._WS_in_block423); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS38);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// udfs.g3:78:8: NLINE
					{
					DebugLocation(78, 8);
					NLINE39=(CommonToken)Match(input,NLINE,Follow._NLINE_in_block427); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NLINE.Add(NLINE39);


					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }

			DebugLocation(79, 2);
			// udfs.g3:79:2: ( varDeclarations )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==VAR))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// udfs.g3:79:2: varDeclarations
				{
				DebugLocation(79, 2);
				PushFollow(Follow._varDeclarations_in_block432);
				varDeclarations40=varDeclarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_varDeclarations.Add(varDeclarations40.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(80, 2);
			// udfs.g3:80:2: ( WS | NLINE )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=3;
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==WS))
				{
					alt23 = 1;
				}
				else if ((LA23_1==NLINE))
				{
					alt23 = 2;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:80:3: WS
					{
					DebugLocation(80, 3);
					WS41=(CommonToken)Match(input,WS,Follow._WS_in_block438); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS41);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// udfs.g3:80:8: NLINE
					{
					DebugLocation(80, 8);
					NLINE42=(CommonToken)Match(input,NLINE,Follow._NLINE_in_block442); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NLINE.Add(NLINE42);


					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }

			DebugLocation(81, 2);
			// udfs.g3:81:2: (i+= statement | WS | NLINE )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=4;
				try { DebugEnterDecision(24, false);
				switch (input.LA(1))
				{
				case IDINTIFIER:
				case IF:
				case RET:
				case WHILE:
					{
					alt24 = 1;
					}
					break;
				case WS:
					{
					alt24 = 2;
					}
					break;
				case NLINE:
					{
					alt24 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:81:3: i+= statement
					{
					DebugLocation(81, 4);
					PushFollow(Follow._statement_in_block450);
					i=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(i.Tree);
					if (list_i==null) list_i=new List<CommonTree>();
					list_i.Add(i.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// udfs.g3:81:18: WS
					{
					DebugLocation(81, 18);
					WS43=(CommonToken)Match(input,WS,Follow._WS_in_block454); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS43);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// udfs.g3:81:23: NLINE
					{
					DebugLocation(81, 23);
					NLINE44=(CommonToken)Match(input,NLINE,Follow._NLINE_in_block458); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NLINE.Add(NLINE44);


					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(82, 2);
			RBRCT45=(CommonToken)Match(input,RBRCT,Follow._RBRCT_in_block463); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RBRCT.Add(RBRCT45);



			{
			// AST REWRITE
			// elements: LBRCT, varDeclarations, i, RBRCT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: i
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
			root_0 = (CommonTree)adaptor.Nil();
			// 83:2: -> ^( LBRCT ( varDeclarations )? ( $i)* RBRCT )
			{
				DebugLocation(83, 5);
				// udfs.g3:83:5: ^( LBRCT ( varDeclarations )? ( $i)* RBRCT )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(83, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_LBRCT.NextNode(), root_1);

				DebugLocation(83, 13);
				// udfs.g3:83:13: ( varDeclarations )?
				if (stream_varDeclarations.HasNext)
				{
					DebugLocation(83, 13);
					adaptor.AddChild(root_1, stream_varDeclarations.NextTree());

				}
				stream_varDeclarations.Reset();
				DebugLocation(83, 31);
				// udfs.g3:83:31: ( $i)*
				while ( stream_i.HasNext )
				{
					DebugLocation(83, 31);
					adaptor.AddChild(root_1, stream_i.NextTree());

				}
				stream_i.Reset();
				DebugLocation(83, 34);
				adaptor.AddChild(root_1, stream_RBRCT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 7);
			LeaveRule("block", 7);
			LeaveRule_block();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_varDeclarations();
	partial void LeaveRule_varDeclarations();
	// $ANTLR start "varDeclarations"
	// udfs.g3:86:1: varDeclarations : VAR ( WS )+ i+= IDINTIFIER ( ( WS )* ',' ( WS )* i+= IDINTIFIER )* -> ^( VAR ( $i)+ ) ;
	[GrammarRule("varDeclarations")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> varDeclarations()
	{
		EnterRule_varDeclarations();
		EnterRule("varDeclarations", 8);
		TraceIn("varDeclarations", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken VAR46 = default(CommonToken);
		CommonToken WS47 = default(CommonToken);
		CommonToken WS48 = default(CommonToken);
		CommonToken char_literal49 = default(CommonToken);
		CommonToken WS50 = default(CommonToken);
		CommonToken i = default(CommonToken);
		List<CommonToken> list_i = null;

		CommonTree VAR46_tree = default(CommonTree);
		CommonTree WS47_tree = default(CommonTree);
		CommonTree WS48_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree WS50_tree = default(CommonTree);
		CommonTree i_tree = default(CommonTree);
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_IDINTIFIER=new RewriteRuleITokenStream(adaptor,"token IDINTIFIER");
		RewriteRuleITokenStream stream_27=new RewriteRuleITokenStream(adaptor,"token 27");
		try { DebugEnterRule(GrammarFileName, "varDeclarations");
		DebugLocation(86, 1);
		try
		{
			// udfs.g3:86:16: ( VAR ( WS )+ i+= IDINTIFIER ( ( WS )* ',' ( WS )* i+= IDINTIFIER )* -> ^( VAR ( $i)+ ) )
			DebugEnterAlt(1);
			// udfs.g3:87:2: VAR ( WS )+ i+= IDINTIFIER ( ( WS )* ',' ( WS )* i+= IDINTIFIER )*
			{
			DebugLocation(87, 2);
			VAR46=(CommonToken)Match(input,VAR,Follow._VAR_in_varDeclarations489); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VAR.Add(VAR46);

			DebugLocation(87, 6);
			// udfs.g3:87:6: ( WS )+
			int cnt25=0;
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==WS))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:87:6: WS
					{
					DebugLocation(87, 6);
					WS47=(CommonToken)Match(input,WS,Follow._WS_in_varDeclarations491); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS47);


					}
					break;

				default:
					if (cnt25 >= 1)
						goto loop25;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee25 = new EarlyExitException( 25, input );
					DebugRecognitionException(eee25);
					throw eee25;
				}
				cnt25++;
			}
			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(87, 11);
			i=(CommonToken)Match(input,IDINTIFIER,Follow._IDINTIFIER_in_varDeclarations496); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDINTIFIER.Add(i);

			if (list_i==null) list_i=new List<CommonToken>();
			list_i.Add(i);

			DebugLocation(87, 24);
			// udfs.g3:87:24: ( ( WS )* ',' ( WS )* i+= IDINTIFIER )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				try
				{
					alt28 = dfa28.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:87:25: ( WS )* ',' ( WS )* i+= IDINTIFIER
					{
					DebugLocation(87, 25);
					// udfs.g3:87:25: ( WS )*
					try { DebugEnterSubRule(26);
					while (true)
					{
						int alt26=2;
						try { DebugEnterDecision(26, false);
						int LA26_1 = input.LA(1);

						if ((LA26_1==WS))
						{
							alt26 = 1;
						}


						} finally { DebugExitDecision(26); }
						switch ( alt26 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:87:25: WS
							{
							DebugLocation(87, 25);
							WS48=(CommonToken)Match(input,WS,Follow._WS_in_varDeclarations499); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS48);


							}
							break;

						default:
							goto loop26;
						}
					}

					loop26:
						;

					} finally { DebugExitSubRule(26); }

					DebugLocation(87, 29);
					char_literal49=(CommonToken)Match(input,27,Follow._27_in_varDeclarations502); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_27.Add(char_literal49);

					DebugLocation(87, 33);
					// udfs.g3:87:33: ( WS )*
					try { DebugEnterSubRule(27);
					while (true)
					{
						int alt27=2;
						try { DebugEnterDecision(27, false);
						int LA27_1 = input.LA(1);

						if ((LA27_1==WS))
						{
							alt27 = 1;
						}


						} finally { DebugExitDecision(27); }
						switch ( alt27 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:87:33: WS
							{
							DebugLocation(87, 33);
							WS50=(CommonToken)Match(input,WS,Follow._WS_in_varDeclarations504); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS50);


							}
							break;

						default:
							goto loop27;
						}
					}

					loop27:
						;

					} finally { DebugExitSubRule(27); }

					DebugLocation(87, 38);
					i=(CommonToken)Match(input,IDINTIFIER,Follow._IDINTIFIER_in_varDeclarations509); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDINTIFIER.Add(i);

					if (list_i==null) list_i=new List<CommonToken>();
					list_i.Add(i);


					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: VAR, i
			// token labels: 
			// rule labels: retval
			// token list labels: i
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_i=new RewriteRuleITokenStream(adaptor,"token i", list_i);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 88:2: -> ^( VAR ( $i)+ )
			{
				DebugLocation(88, 5);
				// udfs.g3:88:5: ^( VAR ( $i)+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(88, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_VAR.NextNode(), root_1);

				DebugLocation(88, 12);
				if (!(stream_i.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_i.HasNext )
				{
					DebugLocation(88, 12);
					adaptor.AddChild(root_1, stream_i.NextNode());

				}
				stream_i.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("varDeclarations", 8);
			LeaveRule("varDeclarations", 8);
			LeaveRule_varDeclarations();
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "varDeclarations"); }
		return retval;

	}
	// $ANTLR end "varDeclarations"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// udfs.g3:91:1: statement : ( assignment | whileLoop | ifStatement | resultisStatement );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 9);
		TraceIn("statement", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> assignment51 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whileLoop52 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> ifStatement53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> resultisStatement54 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(91, 1);
		try
		{
			// udfs.g3:91:10: ( assignment | whileLoop | ifStatement | resultisStatement )
			int alt29=4;
			try { DebugEnterDecision(29, false);
			switch (input.LA(1))
			{
			case IDINTIFIER:
				{
				alt29 = 1;
				}
				break;
			case WHILE:
				{
				alt29 = 2;
				}
				break;
			case IF:
				{
				alt29 = 3;
				}
				break;
			case RET:
				{
				alt29 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// udfs.g3:92:2: assignment
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(92, 2);
				PushFollow(Follow._assignment_in_statement532);
				assignment51=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment51.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// udfs.g3:93:4: whileLoop
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(93, 4);
				PushFollow(Follow._whileLoop_in_statement537);
				whileLoop52=whileLoop();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whileLoop52.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// udfs.g3:94:4: ifStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(94, 4);
				PushFollow(Follow._ifStatement_in_statement542);
				ifStatement53=ifStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifStatement53.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// udfs.g3:95:4: resultisStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(95, 4);
				PushFollow(Follow._resultisStatement_in_statement547);
				resultisStatement54=resultisStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, resultisStatement54.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 9);
			LeaveRule("statement", 9);
			LeaveRule_statement();
		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_resultisStatement();
	partial void LeaveRule_resultisStatement();
	// $ANTLR start "resultisStatement"
	// udfs.g3:98:1: resultisStatement : RET ( WS )+ expression -> ^( RET expression ) ;
	[GrammarRule("resultisStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> resultisStatement()
	{
		EnterRule_resultisStatement();
		EnterRule("resultisStatement", 10);
		TraceIn("resultisStatement", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken RET55 = default(CommonToken);
		CommonToken WS56 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression57 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree RET55_tree = default(CommonTree);
		CommonTree WS56_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RET=new RewriteRuleITokenStream(adaptor,"token RET");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "resultisStatement");
		DebugLocation(98, 1);
		try
		{
			// udfs.g3:98:18: ( RET ( WS )+ expression -> ^( RET expression ) )
			DebugEnterAlt(1);
			// udfs.g3:99:2: RET ( WS )+ expression
			{
			DebugLocation(99, 2);
			RET55=(CommonToken)Match(input,RET,Follow._RET_in_resultisStatement557); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RET.Add(RET55);

			DebugLocation(99, 6);
			// udfs.g3:99:6: ( WS )+
			int cnt30=0;
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==WS))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:99:6: WS
					{
					DebugLocation(99, 6);
					WS56=(CommonToken)Match(input,WS,Follow._WS_in_resultisStatement559); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS56);


					}
					break;

				default:
					if (cnt30 >= 1)
						goto loop30;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee30 = new EarlyExitException( 30, input );
					DebugRecognitionException(eee30);
					throw eee30;
				}
				cnt30++;
			}
			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(99, 10);
			PushFollow(Follow._expression_in_resultisStatement562);
			expression57=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression57.Tree);


			{
			// AST REWRITE
			// elements: RET, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 100:2: -> ^( RET expression )
			{
				DebugLocation(100, 5);
				// udfs.g3:100:5: ^( RET expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(100, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_RET.NextNode(), root_1);

				DebugLocation(100, 11);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("resultisStatement", 10);
			LeaveRule("resultisStatement", 10);
			LeaveRule_resultisStatement();
		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "resultisStatement"); }
		return retval;

	}
	// $ANTLR end "resultisStatement"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// udfs.g3:103:1: assignment : IDINTIFIER ( WS )* ':=' ( WS )* expression ( WS )* NLINE -> ^( ':=' IDINTIFIER expression ) ;
	[GrammarRule("assignment")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 11);
		TraceIn("assignment", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDINTIFIER58 = default(CommonToken);
		CommonToken WS59 = default(CommonToken);
		CommonToken string_literal60 = default(CommonToken);
		CommonToken WS61 = default(CommonToken);
		CommonToken WS63 = default(CommonToken);
		CommonToken NLINE64 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDINTIFIER58_tree = default(CommonTree);
		CommonTree WS59_tree = default(CommonTree);
		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree WS61_tree = default(CommonTree);
		CommonTree WS63_tree = default(CommonTree);
		CommonTree NLINE64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDINTIFIER=new RewriteRuleITokenStream(adaptor,"token IDINTIFIER");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_30=new RewriteRuleITokenStream(adaptor,"token 30");
		RewriteRuleITokenStream stream_NLINE=new RewriteRuleITokenStream(adaptor,"token NLINE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(103, 1);
		try
		{
			// udfs.g3:103:11: ( IDINTIFIER ( WS )* ':=' ( WS )* expression ( WS )* NLINE -> ^( ':=' IDINTIFIER expression ) )
			DebugEnterAlt(1);
			// udfs.g3:104:2: IDINTIFIER ( WS )* ':=' ( WS )* expression ( WS )* NLINE
			{
			DebugLocation(104, 2);
			IDINTIFIER58=(CommonToken)Match(input,IDINTIFIER,Follow._IDINTIFIER_in_assignment581); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDINTIFIER.Add(IDINTIFIER58);

			DebugLocation(104, 13);
			// udfs.g3:104:13: ( WS )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==WS))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:104:13: WS
					{
					DebugLocation(104, 13);
					WS59=(CommonToken)Match(input,WS,Follow._WS_in_assignment583); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS59);


					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }

			DebugLocation(104, 17);
			string_literal60=(CommonToken)Match(input,30,Follow._30_in_assignment586); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_30.Add(string_literal60);

			DebugLocation(104, 22);
			// udfs.g3:104:22: ( WS )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==WS))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:104:22: WS
					{
					DebugLocation(104, 22);
					WS61=(CommonToken)Match(input,WS,Follow._WS_in_assignment588); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS61);


					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }

			DebugLocation(104, 26);
			PushFollow(Follow._expression_in_assignment591);
			expression62=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression62.Tree);
			DebugLocation(104, 38);
			// udfs.g3:104:38: ( WS )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==WS))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:104:38: WS
					{
					DebugLocation(104, 38);
					WS63=(CommonToken)Match(input,WS,Follow._WS_in_assignment594); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS63);


					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }

			DebugLocation(104, 42);
			NLINE64=(CommonToken)Match(input,NLINE,Follow._NLINE_in_assignment597); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NLINE.Add(NLINE64);



			{
			// AST REWRITE
			// elements: 30, IDINTIFIER, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 105:2: -> ^( ':=' IDINTIFIER expression )
			{
				DebugLocation(105, 5);
				// udfs.g3:105:5: ^( ':=' IDINTIFIER expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(105, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_30.NextNode(), root_1);

				DebugLocation(105, 12);
				adaptor.AddChild(root_1, stream_IDINTIFIER.NextNode());
				DebugLocation(105, 23);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 11);
			LeaveRule("assignment", 11);
			LeaveRule_assignment();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_whileLoop();
	partial void LeaveRule_whileLoop();
	// $ANTLR start "whileLoop"
	// udfs.g3:108:1: whileLoop : WHILE ( WS )+ expression ( WS | NLINE )* blockStatement -> ^( WHILE expression blockStatement ) ;
	[GrammarRule("whileLoop")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whileLoop()
	{
		EnterRule_whileLoop();
		EnterRule("whileLoop", 12);
		TraceIn("whileLoop", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHILE65 = default(CommonToken);
		CommonToken WS66 = default(CommonToken);
		CommonToken WS68 = default(CommonToken);
		CommonToken NLINE69 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression67 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> blockStatement70 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHILE65_tree = default(CommonTree);
		CommonTree WS66_tree = default(CommonTree);
		CommonTree WS68_tree = default(CommonTree);
		CommonTree NLINE69_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WHILE=new RewriteRuleITokenStream(adaptor,"token WHILE");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_NLINE=new RewriteRuleITokenStream(adaptor,"token NLINE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
		try { DebugEnterRule(GrammarFileName, "whileLoop");
		DebugLocation(108, 1);
		try
		{
			// udfs.g3:108:10: ( WHILE ( WS )+ expression ( WS | NLINE )* blockStatement -> ^( WHILE expression blockStatement ) )
			DebugEnterAlt(1);
			// udfs.g3:109:2: WHILE ( WS )+ expression ( WS | NLINE )* blockStatement
			{
			DebugLocation(109, 2);
			WHILE65=(CommonToken)Match(input,WHILE,Follow._WHILE_in_whileLoop618); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHILE.Add(WHILE65);

			DebugLocation(109, 8);
			// udfs.g3:109:8: ( WS )+
			int cnt34=0;
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==WS))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:109:8: WS
					{
					DebugLocation(109, 8);
					WS66=(CommonToken)Match(input,WS,Follow._WS_in_whileLoop620); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS66);


					}
					break;

				default:
					if (cnt34 >= 1)
						goto loop34;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee34 = new EarlyExitException( 34, input );
					DebugRecognitionException(eee34);
					throw eee34;
				}
				cnt34++;
			}
			loop34:
				;

			} finally { DebugExitSubRule(34); }

			DebugLocation(109, 12);
			PushFollow(Follow._expression_in_whileLoop623);
			expression67=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression67.Tree);
			DebugLocation(109, 23);
			// udfs.g3:109:23: ( WS | NLINE )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=3;
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==WS))
				{
					alt35 = 1;
				}
				else if ((LA35_1==NLINE))
				{
					alt35 = 2;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:109:24: WS
					{
					DebugLocation(109, 24);
					WS68=(CommonToken)Match(input,WS,Follow._WS_in_whileLoop626); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS68);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// udfs.g3:109:29: NLINE
					{
					DebugLocation(109, 29);
					NLINE69=(CommonToken)Match(input,NLINE,Follow._NLINE_in_whileLoop630); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NLINE.Add(NLINE69);


					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }

			DebugLocation(109, 37);
			PushFollow(Follow._blockStatement_in_whileLoop634);
			blockStatement70=blockStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_blockStatement.Add(blockStatement70.Tree);


			{
			// AST REWRITE
			// elements: WHILE, expression, blockStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 110:2: -> ^( WHILE expression blockStatement )
			{
				DebugLocation(110, 5);
				// udfs.g3:110:5: ^( WHILE expression blockStatement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(110, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHILE.NextNode(), root_1);

				DebugLocation(110, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(110, 24);
				adaptor.AddChild(root_1, stream_blockStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileLoop", 12);
			LeaveRule("whileLoop", 12);
			LeaveRule_whileLoop();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "whileLoop"); }
		return retval;

	}
	// $ANTLR end "whileLoop"

	partial void EnterRule_ifStatement();
	partial void LeaveRule_ifStatement();
	// $ANTLR start "ifStatement"
	// udfs.g3:113:1: ifStatement : IF ( WS )+ expression ( WS | NLINE )* blockStatement ( WS | NLINE )* ( elseStatement )? -> ^( IF expression blockStatement ( elseStatement )? ) ;
	[GrammarRule("ifStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 13);
		TraceIn("ifStatement", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IF71 = default(CommonToken);
		CommonToken WS72 = default(CommonToken);
		CommonToken WS74 = default(CommonToken);
		CommonToken NLINE75 = default(CommonToken);
		CommonToken WS77 = default(CommonToken);
		CommonToken NLINE78 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression73 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> blockStatement76 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elseStatement79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IF71_tree = default(CommonTree);
		CommonTree WS72_tree = default(CommonTree);
		CommonTree WS74_tree = default(CommonTree);
		CommonTree NLINE75_tree = default(CommonTree);
		CommonTree WS77_tree = default(CommonTree);
		CommonTree NLINE78_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_NLINE=new RewriteRuleITokenStream(adaptor,"token NLINE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
		RewriteRuleSubtreeStream stream_elseStatement=new RewriteRuleSubtreeStream(adaptor,"rule elseStatement");
		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(113, 1);
		try
		{
			// udfs.g3:113:12: ( IF ( WS )+ expression ( WS | NLINE )* blockStatement ( WS | NLINE )* ( elseStatement )? -> ^( IF expression blockStatement ( elseStatement )? ) )
			DebugEnterAlt(1);
			// udfs.g3:114:2: IF ( WS )+ expression ( WS | NLINE )* blockStatement ( WS | NLINE )* ( elseStatement )?
			{
			DebugLocation(114, 2);
			IF71=(CommonToken)Match(input,IF,Follow._IF_in_ifStatement655); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IF.Add(IF71);

			DebugLocation(114, 5);
			// udfs.g3:114:5: ( WS )+
			int cnt36=0;
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==WS))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:114:5: WS
					{
					DebugLocation(114, 5);
					WS72=(CommonToken)Match(input,WS,Follow._WS_in_ifStatement657); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS72);


					}
					break;

				default:
					if (cnt36 >= 1)
						goto loop36;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee36 = new EarlyExitException( 36, input );
					DebugRecognitionException(eee36);
					throw eee36;
				}
				cnt36++;
			}
			loop36:
				;

			} finally { DebugExitSubRule(36); }

			DebugLocation(114, 9);
			PushFollow(Follow._expression_in_ifStatement660);
			expression73=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression73.Tree);
			DebugLocation(114, 20);
			// udfs.g3:114:20: ( WS | NLINE )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=3;
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==WS))
				{
					alt37 = 1;
				}
				else if ((LA37_1==NLINE))
				{
					alt37 = 2;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:114:21: WS
					{
					DebugLocation(114, 21);
					WS74=(CommonToken)Match(input,WS,Follow._WS_in_ifStatement663); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS74);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// udfs.g3:114:26: NLINE
					{
					DebugLocation(114, 26);
					NLINE75=(CommonToken)Match(input,NLINE,Follow._NLINE_in_ifStatement667); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NLINE.Add(NLINE75);


					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }

			DebugLocation(114, 34);
			PushFollow(Follow._blockStatement_in_ifStatement671);
			blockStatement76=blockStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_blockStatement.Add(blockStatement76.Tree);
			DebugLocation(114, 49);
			// udfs.g3:114:49: ( WS | NLINE )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=3;
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==WS))
				{
					alt38 = 1;
				}
				else if ((LA38_1==NLINE))
				{
					alt38 = 2;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:114:50: WS
					{
					DebugLocation(114, 50);
					WS77=(CommonToken)Match(input,WS,Follow._WS_in_ifStatement674); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS77);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// udfs.g3:114:55: NLINE
					{
					DebugLocation(114, 55);
					NLINE78=(CommonToken)Match(input,NLINE,Follow._NLINE_in_ifStatement678); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NLINE.Add(NLINE78);


					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }

			DebugLocation(114, 63);
			// udfs.g3:114:63: ( elseStatement )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_1 = input.LA(1);

			if ((LA39_1==ELSE))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// udfs.g3:114:63: elseStatement
				{
				DebugLocation(114, 63);
				PushFollow(Follow._elseStatement_in_ifStatement682);
				elseStatement79=elseStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_elseStatement.Add(elseStatement79.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }



			{
			// AST REWRITE
			// elements: IF, expression, blockStatement, elseStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 115:2: -> ^( IF expression blockStatement ( elseStatement )? )
			{
				DebugLocation(115, 5);
				// udfs.g3:115:5: ^( IF expression blockStatement ( elseStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(115, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

				DebugLocation(115, 10);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(115, 21);
				adaptor.AddChild(root_1, stream_blockStatement.NextTree());
				DebugLocation(115, 36);
				// udfs.g3:115:36: ( elseStatement )?
				if (stream_elseStatement.HasNext)
				{
					DebugLocation(115, 36);
					adaptor.AddChild(root_1, stream_elseStatement.NextTree());

				}
				stream_elseStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifStatement", 13);
			LeaveRule("ifStatement", 13);
			LeaveRule_ifStatement();
		}
		DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return retval;

	}
	// $ANTLR end "ifStatement"

	partial void EnterRule_elseStatement();
	partial void LeaveRule_elseStatement();
	// $ANTLR start "elseStatement"
	// udfs.g3:118:1: elseStatement : ELSE ( WS | NLINE )* blockStatement -> ^( ELSE blockStatement ) ;
	[GrammarRule("elseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> elseStatement()
	{
		EnterRule_elseStatement();
		EnterRule("elseStatement", 14);
		TraceIn("elseStatement", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ELSE80 = default(CommonToken);
		CommonToken WS81 = default(CommonToken);
		CommonToken NLINE82 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> blockStatement83 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ELSE80_tree = default(CommonTree);
		CommonTree WS81_tree = default(CommonTree);
		CommonTree NLINE82_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_NLINE=new RewriteRuleITokenStream(adaptor,"token NLINE");
		RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
		try { DebugEnterRule(GrammarFileName, "elseStatement");
		DebugLocation(118, 1);
		try
		{
			// udfs.g3:118:14: ( ELSE ( WS | NLINE )* blockStatement -> ^( ELSE blockStatement ) )
			DebugEnterAlt(1);
			// udfs.g3:119:2: ELSE ( WS | NLINE )* blockStatement
			{
			DebugLocation(119, 2);
			ELSE80=(CommonToken)Match(input,ELSE,Follow._ELSE_in_elseStatement707); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ELSE.Add(ELSE80);

			DebugLocation(119, 7);
			// udfs.g3:119:7: ( WS | NLINE )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=3;
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==WS))
				{
					alt40 = 1;
				}
				else if ((LA40_1==NLINE))
				{
					alt40 = 2;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:119:8: WS
					{
					DebugLocation(119, 8);
					WS81=(CommonToken)Match(input,WS,Follow._WS_in_elseStatement710); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS81);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// udfs.g3:119:13: NLINE
					{
					DebugLocation(119, 13);
					NLINE82=(CommonToken)Match(input,NLINE,Follow._NLINE_in_elseStatement714); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NLINE.Add(NLINE82);


					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }

			DebugLocation(119, 21);
			PushFollow(Follow._blockStatement_in_elseStatement718);
			blockStatement83=blockStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_blockStatement.Add(blockStatement83.Tree);


			{
			// AST REWRITE
			// elements: ELSE, blockStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 120:2: -> ^( ELSE blockStatement )
			{
				DebugLocation(120, 5);
				// udfs.g3:120:5: ^( ELSE blockStatement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(120, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_ELSE.NextNode(), root_1);

				DebugLocation(120, 12);
				adaptor.AddChild(root_1, stream_blockStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elseStatement", 14);
			LeaveRule("elseStatement", 14);
			LeaveRule_elseStatement();
		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "elseStatement"); }
		return retval;

	}
	// $ANTLR end "elseStatement"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// udfs.g3:123:1: expression : logicalExpr ( ( WS )* ':=' ^ ( WS )* logicalExpr )* ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 15);
		TraceIn("expression", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WS85 = default(CommonToken);
		CommonToken string_literal86 = default(CommonToken);
		CommonToken WS87 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> logicalExpr84 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> logicalExpr88 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WS85_tree = default(CommonTree);
		CommonTree string_literal86_tree = default(CommonTree);
		CommonTree WS87_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(123, 1);
		try
		{
			// udfs.g3:123:11: ( logicalExpr ( ( WS )* ':=' ^ ( WS )* logicalExpr )* )
			DebugEnterAlt(1);
			// udfs.g3:124:2: logicalExpr ( ( WS )* ':=' ^ ( WS )* logicalExpr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(124, 2);
			PushFollow(Follow._logicalExpr_in_expression738);
			logicalExpr84=logicalExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalExpr84.Tree);
			DebugLocation(124, 14);
			// udfs.g3:124:14: ( ( WS )* ':=' ^ ( WS )* logicalExpr )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				try
				{
					alt43 = dfa43.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:124:15: ( WS )* ':=' ^ ( WS )* logicalExpr
					{
					DebugLocation(124, 15);
					// udfs.g3:124:15: ( WS )*
					try { DebugEnterSubRule(41);
					while (true)
					{
						int alt41=2;
						try { DebugEnterDecision(41, false);
						int LA41_1 = input.LA(1);

						if ((LA41_1==WS))
						{
							alt41 = 1;
						}


						} finally { DebugExitDecision(41); }
						switch ( alt41 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:124:15: WS
							{
							DebugLocation(124, 15);
							WS85=(CommonToken)Match(input,WS,Follow._WS_in_expression741); if (state.failed) return retval;
							if (state.backtracking == 0) {
							WS85_tree = (CommonTree)adaptor.Create(WS85);
							adaptor.AddChild(root_0, WS85_tree);
							}

							}
							break;

						default:
							goto loop41;
						}
					}

					loop41:
						;

					} finally { DebugExitSubRule(41); }

					DebugLocation(124, 23);
					string_literal86=(CommonToken)Match(input,30,Follow._30_in_expression744); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal86_tree = (CommonTree)adaptor.Create(string_literal86);
					root_0 = (CommonTree)adaptor.BecomeRoot(string_literal86_tree, root_0);
					}
					DebugLocation(124, 25);
					// udfs.g3:124:25: ( WS )*
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_1 = input.LA(1);

						if ((LA42_1==WS))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch ( alt42 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:124:25: WS
							{
							DebugLocation(124, 25);
							WS87=(CommonToken)Match(input,WS,Follow._WS_in_expression747); if (state.failed) return retval;
							if (state.backtracking == 0) {
							WS87_tree = (CommonTree)adaptor.Create(WS87);
							adaptor.AddChild(root_0, WS87_tree);
							}

							}
							break;

						default:
							goto loop42;
						}
					}

					loop42:
						;

					} finally { DebugExitSubRule(42); }

					DebugLocation(124, 29);
					PushFollow(Follow._logicalExpr_in_expression750);
					logicalExpr88=logicalExpr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalExpr88.Tree);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 15);
			LeaveRule("expression", 15);
			LeaveRule_expression();
		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_logicalExpr();
	partial void LeaveRule_logicalExpr();
	// $ANTLR start "logicalExpr"
	// udfs.g3:127:1: logicalExpr : addSubExpr ( ( WS )* ( '&' ^| '|' ^| '^' ^| '<' ^| '>' ^| '<=' ^| '>=' ^| '=' ^| '!=' ^) ( WS )* addSubExpr )* ;
	[GrammarRule("logicalExpr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> logicalExpr()
	{
		EnterRule_logicalExpr();
		EnterRule("logicalExpr", 16);
		TraceIn("logicalExpr", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WS90 = default(CommonToken);
		CommonToken char_literal91 = default(CommonToken);
		CommonToken char_literal92 = default(CommonToken);
		CommonToken char_literal93 = default(CommonToken);
		CommonToken char_literal94 = default(CommonToken);
		CommonToken char_literal95 = default(CommonToken);
		CommonToken string_literal96 = default(CommonToken);
		CommonToken string_literal97 = default(CommonToken);
		CommonToken char_literal98 = default(CommonToken);
		CommonToken string_literal99 = default(CommonToken);
		CommonToken WS100 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> addSubExpr89 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> addSubExpr101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WS90_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		CommonTree char_literal93_tree = default(CommonTree);
		CommonTree char_literal94_tree = default(CommonTree);
		CommonTree char_literal95_tree = default(CommonTree);
		CommonTree string_literal96_tree = default(CommonTree);
		CommonTree string_literal97_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree string_literal99_tree = default(CommonTree);
		CommonTree WS100_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logicalExpr");
		DebugLocation(127, 1);
		try
		{
			// udfs.g3:127:12: ( addSubExpr ( ( WS )* ( '&' ^| '|' ^| '^' ^| '<' ^| '>' ^| '<=' ^| '>=' ^| '=' ^| '!=' ^) ( WS )* addSubExpr )* )
			DebugEnterAlt(1);
			// udfs.g3:128:2: addSubExpr ( ( WS )* ( '&' ^| '|' ^| '^' ^| '<' ^| '>' ^| '<=' ^| '>=' ^| '=' ^| '!=' ^) ( WS )* addSubExpr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(128, 2);
			PushFollow(Follow._addSubExpr_in_logicalExpr763);
			addSubExpr89=addSubExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, addSubExpr89.Tree);
			DebugLocation(128, 13);
			// udfs.g3:128:13: ( ( WS )* ( '&' ^| '|' ^| '^' ^| '<' ^| '>' ^| '<=' ^| '>=' ^| '=' ^| '!=' ^) ( WS )* addSubExpr )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				try
				{
					alt47 = dfa47.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:128:14: ( WS )* ( '&' ^| '|' ^| '^' ^| '<' ^| '>' ^| '<=' ^| '>=' ^| '=' ^| '!=' ^) ( WS )* addSubExpr
					{
					DebugLocation(128, 14);
					// udfs.g3:128:14: ( WS )*
					try { DebugEnterSubRule(44);
					while (true)
					{
						int alt44=2;
						try { DebugEnterDecision(44, false);
						int LA44_1 = input.LA(1);

						if ((LA44_1==WS))
						{
							alt44 = 1;
						}


						} finally { DebugExitDecision(44); }
						switch ( alt44 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:128:14: WS
							{
							DebugLocation(128, 14);
							WS90=(CommonToken)Match(input,WS,Follow._WS_in_logicalExpr766); if (state.failed) return retval;
							if (state.backtracking == 0) {
							WS90_tree = (CommonTree)adaptor.Create(WS90);
							adaptor.AddChild(root_0, WS90_tree);
							}

							}
							break;

						default:
							goto loop44;
						}
					}

					loop44:
						;

					} finally { DebugExitSubRule(44); }

					DebugLocation(128, 18);
					// udfs.g3:128:18: ( '&' ^| '|' ^| '^' ^| '<' ^| '>' ^| '<=' ^| '>=' ^| '=' ^| '!=' ^)
					int alt45=9;
					try { DebugEnterSubRule(45);
					try { DebugEnterDecision(45, false);
					switch (input.LA(1))
					{
					case 24:
						{
						alt45 = 1;
						}
						break;
					case 37:
						{
						alt45 = 2;
						}
						break;
					case 36:
						{
						alt45 = 3;
						}
						break;
					case 31:
						{
						alt45 = 4;
						}
						break;
					case 34:
						{
						alt45 = 5;
						}
						break;
					case 32:
						{
						alt45 = 6;
						}
						break;
					case 35:
						{
						alt45 = 7;
						}
						break;
					case 33:
						{
						alt45 = 8;
						}
						break;
					case 22:
						{
						alt45 = 9;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(45); }
					switch (alt45)
					{
					case 1:
						DebugEnterAlt(1);
						// udfs.g3:128:20: '&' ^
						{
						DebugLocation(128, 23);
						char_literal91=(CommonToken)Match(input,24,Follow._24_in_logicalExpr771); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal91_tree = (CommonTree)adaptor.Create(char_literal91);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal91_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// udfs.g3:128:27: '|' ^
						{
						DebugLocation(128, 30);
						char_literal92=(CommonToken)Match(input,37,Follow._37_in_logicalExpr776); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal92_tree = (CommonTree)adaptor.Create(char_literal92);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal92_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// udfs.g3:128:34: '^' ^
						{
						DebugLocation(128, 37);
						char_literal93=(CommonToken)Match(input,36,Follow._36_in_logicalExpr781); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal93_tree = (CommonTree)adaptor.Create(char_literal93);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal93_tree, root_0);
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// udfs.g3:128:41: '<' ^
						{
						DebugLocation(128, 44);
						char_literal94=(CommonToken)Match(input,31,Follow._31_in_logicalExpr786); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal94_tree = (CommonTree)adaptor.Create(char_literal94);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal94_tree, root_0);
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// udfs.g3:128:48: '>' ^
						{
						DebugLocation(128, 51);
						char_literal95=(CommonToken)Match(input,34,Follow._34_in_logicalExpr791); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal95_tree = (CommonTree)adaptor.Create(char_literal95);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal95_tree, root_0);
						}

						}
						break;
					case 6:
						DebugEnterAlt(6);
						// udfs.g3:128:55: '<=' ^
						{
						DebugLocation(128, 59);
						string_literal96=(CommonToken)Match(input,32,Follow._32_in_logicalExpr796); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal96_tree = (CommonTree)adaptor.Create(string_literal96);
						root_0 = (CommonTree)adaptor.BecomeRoot(string_literal96_tree, root_0);
						}

						}
						break;
					case 7:
						DebugEnterAlt(7);
						// udfs.g3:128:63: '>=' ^
						{
						DebugLocation(128, 67);
						string_literal97=(CommonToken)Match(input,35,Follow._35_in_logicalExpr801); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal97_tree = (CommonTree)adaptor.Create(string_literal97);
						root_0 = (CommonTree)adaptor.BecomeRoot(string_literal97_tree, root_0);
						}

						}
						break;
					case 8:
						DebugEnterAlt(8);
						// udfs.g3:128:71: '=' ^
						{
						DebugLocation(128, 74);
						char_literal98=(CommonToken)Match(input,33,Follow._33_in_logicalExpr806); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal98_tree = (CommonTree)adaptor.Create(char_literal98);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal98_tree, root_0);
						}

						}
						break;
					case 9:
						DebugEnterAlt(9);
						// udfs.g3:128:78: '!=' ^
						{
						DebugLocation(128, 82);
						string_literal99=(CommonToken)Match(input,22,Follow._22_in_logicalExpr811); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal99_tree = (CommonTree)adaptor.Create(string_literal99);
						root_0 = (CommonTree)adaptor.BecomeRoot(string_literal99_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(45); }

					DebugLocation(128, 86);
					// udfs.g3:128:86: ( WS )*
					try { DebugEnterSubRule(46);
					while (true)
					{
						int alt46=2;
						try { DebugEnterDecision(46, false);
						int LA46_1 = input.LA(1);

						if ((LA46_1==WS))
						{
							alt46 = 1;
						}


						} finally { DebugExitDecision(46); }
						switch ( alt46 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:128:86: WS
							{
							DebugLocation(128, 86);
							WS100=(CommonToken)Match(input,WS,Follow._WS_in_logicalExpr816); if (state.failed) return retval;
							if (state.backtracking == 0) {
							WS100_tree = (CommonTree)adaptor.Create(WS100);
							adaptor.AddChild(root_0, WS100_tree);
							}

							}
							break;

						default:
							goto loop46;
						}
					}

					loop46:
						;

					} finally { DebugExitSubRule(46); }

					DebugLocation(128, 90);
					PushFollow(Follow._addSubExpr_in_logicalExpr819);
					addSubExpr101=addSubExpr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, addSubExpr101.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalExpr", 16);
			LeaveRule("logicalExpr", 16);
			LeaveRule_logicalExpr();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalExpr"); }
		return retval;

	}
	// $ANTLR end "logicalExpr"

	partial void EnterRule_addSubExpr();
	partial void LeaveRule_addSubExpr();
	// $ANTLR start "addSubExpr"
	// udfs.g3:131:1: addSubExpr : multDivExpr ( ( WS )* ( '+' ^| '-' ^) ( WS )* multDivExpr )* ;
	[GrammarRule("addSubExpr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> addSubExpr()
	{
		EnterRule_addSubExpr();
		EnterRule("addSubExpr", 17);
		TraceIn("addSubExpr", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WS103 = default(CommonToken);
		CommonToken char_literal104 = default(CommonToken);
		CommonToken char_literal105 = default(CommonToken);
		CommonToken WS106 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> multDivExpr102 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> multDivExpr107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WS103_tree = default(CommonTree);
		CommonTree char_literal104_tree = default(CommonTree);
		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree WS106_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "addSubExpr");
		DebugLocation(131, 56);
		try
		{
			// udfs.g3:132:5: ( multDivExpr ( ( WS )* ( '+' ^| '-' ^) ( WS )* multDivExpr )* )
			DebugEnterAlt(1);
			// udfs.g3:132:7: multDivExpr ( ( WS )* ( '+' ^| '-' ^) ( WS )* multDivExpr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(132, 7);
			PushFollow(Follow._multDivExpr_in_addSubExpr835);
			multDivExpr102=multDivExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multDivExpr102.Tree);
			DebugLocation(132, 19);
			// udfs.g3:132:19: ( ( WS )* ( '+' ^| '-' ^) ( WS )* multDivExpr )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				try
				{
					alt51 = dfa51.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:132:20: ( WS )* ( '+' ^| '-' ^) ( WS )* multDivExpr
					{
					DebugLocation(132, 20);
					// udfs.g3:132:20: ( WS )*
					try { DebugEnterSubRule(48);
					while (true)
					{
						int alt48=2;
						try { DebugEnterDecision(48, false);
						int LA48_1 = input.LA(1);

						if ((LA48_1==WS))
						{
							alt48 = 1;
						}


						} finally { DebugExitDecision(48); }
						switch ( alt48 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:132:20: WS
							{
							DebugLocation(132, 20);
							WS103=(CommonToken)Match(input,WS,Follow._WS_in_addSubExpr838); if (state.failed) return retval;
							if (state.backtracking == 0) {
							WS103_tree = (CommonTree)adaptor.Create(WS103);
							adaptor.AddChild(root_0, WS103_tree);
							}

							}
							break;

						default:
							goto loop48;
						}
					}

					loop48:
						;

					} finally { DebugExitSubRule(48); }

					DebugLocation(132, 24);
					// udfs.g3:132:24: ( '+' ^| '-' ^)
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, false);
					int LA49_1 = input.LA(1);

					if ((LA49_1==26))
					{
						alt49 = 1;
					}
					else if ((LA49_1==28))
					{
						alt49 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// udfs.g3:132:26: '+' ^
						{
						DebugLocation(132, 29);
						char_literal104=(CommonToken)Match(input,26,Follow._26_in_addSubExpr843); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal104_tree = (CommonTree)adaptor.Create(char_literal104);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal104_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// udfs.g3:132:33: '-' ^
						{
						DebugLocation(132, 36);
						char_literal105=(CommonToken)Match(input,28,Follow._28_in_addSubExpr848); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal105_tree = (CommonTree)adaptor.Create(char_literal105);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal105_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(132, 40);
					// udfs.g3:132:40: ( WS )*
					try { DebugEnterSubRule(50);
					while (true)
					{
						int alt50=2;
						try { DebugEnterDecision(50, false);
						int LA50_1 = input.LA(1);

						if ((LA50_1==WS))
						{
							alt50 = 1;
						}


						} finally { DebugExitDecision(50); }
						switch ( alt50 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:132:40: WS
							{
							DebugLocation(132, 40);
							WS106=(CommonToken)Match(input,WS,Follow._WS_in_addSubExpr853); if (state.failed) return retval;
							if (state.backtracking == 0) {
							WS106_tree = (CommonTree)adaptor.Create(WS106);
							adaptor.AddChild(root_0, WS106_tree);
							}

							}
							break;

						default:
							goto loop50;
						}
					}

					loop50:
						;

					} finally { DebugExitSubRule(50); }

					DebugLocation(132, 44);
					PushFollow(Follow._multDivExpr_in_addSubExpr856);
					multDivExpr107=multDivExpr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multDivExpr107.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addSubExpr", 17);
			LeaveRule("addSubExpr", 17);
			LeaveRule_addSubExpr();
		}
		DebugLocation(132, 56);
		} finally { DebugExitRule(GrammarFileName, "addSubExpr"); }
		return retval;

	}
	// $ANTLR end "addSubExpr"

	partial void EnterRule_multDivExpr();
	partial void LeaveRule_multDivExpr();
	// $ANTLR start "multDivExpr"
	// udfs.g3:134:1: multDivExpr : atom ( ( WS )* ( '*' ^| '/' ^| '%' ^) ( WS )* atom )* ;
	[GrammarRule("multDivExpr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> multDivExpr()
	{
		EnterRule_multDivExpr();
		EnterRule("multDivExpr", 18);
		TraceIn("multDivExpr", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WS109 = default(CommonToken);
		CommonToken char_literal110 = default(CommonToken);
		CommonToken char_literal111 = default(CommonToken);
		CommonToken char_literal112 = default(CommonToken);
		CommonToken WS113 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom114 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WS109_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree char_literal111_tree = default(CommonTree);
		CommonTree char_literal112_tree = default(CommonTree);
		CommonTree WS113_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multDivExpr");
		DebugLocation(134, 47);
		try
		{
			// udfs.g3:135:3: ( atom ( ( WS )* ( '*' ^| '/' ^| '%' ^) ( WS )* atom )* )
			DebugEnterAlt(1);
			// udfs.g3:135:5: atom ( ( WS )* ( '*' ^| '/' ^| '%' ^) ( WS )* atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(135, 5);
			PushFollow(Follow._atom_in_multDivExpr869);
			atom108=atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom108.Tree);
			DebugLocation(135, 10);
			// udfs.g3:135:10: ( ( WS )* ( '*' ^| '/' ^| '%' ^) ( WS )* atom )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				try
				{
					alt55 = dfa55.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:135:11: ( WS )* ( '*' ^| '/' ^| '%' ^) ( WS )* atom
					{
					DebugLocation(135, 11);
					// udfs.g3:135:11: ( WS )*
					try { DebugEnterSubRule(52);
					while (true)
					{
						int alt52=2;
						try { DebugEnterDecision(52, false);
						int LA52_1 = input.LA(1);

						if ((LA52_1==WS))
						{
							alt52 = 1;
						}


						} finally { DebugExitDecision(52); }
						switch ( alt52 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:135:11: WS
							{
							DebugLocation(135, 11);
							WS109=(CommonToken)Match(input,WS,Follow._WS_in_multDivExpr872); if (state.failed) return retval;
							if (state.backtracking == 0) {
							WS109_tree = (CommonTree)adaptor.Create(WS109);
							adaptor.AddChild(root_0, WS109_tree);
							}

							}
							break;

						default:
							goto loop52;
						}
					}

					loop52:
						;

					} finally { DebugExitSubRule(52); }

					DebugLocation(135, 15);
					// udfs.g3:135:15: ( '*' ^| '/' ^| '%' ^)
					int alt53=3;
					try { DebugEnterSubRule(53);
					try { DebugEnterDecision(53, false);
					switch (input.LA(1))
					{
					case 25:
						{
						alt53 = 1;
						}
						break;
					case 29:
						{
						alt53 = 2;
						}
						break;
					case 23:
						{
						alt53 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 53, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(53); }
					switch (alt53)
					{
					case 1:
						DebugEnterAlt(1);
						// udfs.g3:135:17: '*' ^
						{
						DebugLocation(135, 20);
						char_literal110=(CommonToken)Match(input,25,Follow._25_in_multDivExpr877); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal110_tree = (CommonTree)adaptor.Create(char_literal110);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal110_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// udfs.g3:135:24: '/' ^
						{
						DebugLocation(135, 27);
						char_literal111=(CommonToken)Match(input,29,Follow._29_in_multDivExpr882); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal111_tree = (CommonTree)adaptor.Create(char_literal111);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal111_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// udfs.g3:135:31: '%' ^
						{
						DebugLocation(135, 34);
						char_literal112=(CommonToken)Match(input,23,Follow._23_in_multDivExpr887); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal112_tree = (CommonTree)adaptor.Create(char_literal112);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal112_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(53); }

					DebugLocation(135, 38);
					// udfs.g3:135:38: ( WS )*
					try { DebugEnterSubRule(54);
					while (true)
					{
						int alt54=2;
						try { DebugEnterDecision(54, false);
						int LA54_1 = input.LA(1);

						if ((LA54_1==WS))
						{
							alt54 = 1;
						}


						} finally { DebugExitDecision(54); }
						switch ( alt54 )
						{
						case 1:
							DebugEnterAlt(1);
							// udfs.g3:135:38: WS
							{
							DebugLocation(135, 38);
							WS113=(CommonToken)Match(input,WS,Follow._WS_in_multDivExpr892); if (state.failed) return retval;
							if (state.backtracking == 0) {
							WS113_tree = (CommonTree)adaptor.Create(WS113);
							adaptor.AddChild(root_0, WS113_tree);
							}

							}
							break;

						default:
							goto loop54;
						}
					}

					loop54:
						;

					} finally { DebugExitSubRule(54); }

					DebugLocation(135, 42);
					PushFollow(Follow._atom_in_multDivExpr895);
					atom114=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom114.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multDivExpr", 18);
			LeaveRule("multDivExpr", 18);
			LeaveRule_multDivExpr();
		}
		DebugLocation(135, 47);
		} finally { DebugExitRule(GrammarFileName, "multDivExpr"); }
		return retval;

	}
	// $ANTLR end "multDivExpr"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// udfs.g3:137:1: atom : ( NUMBER | ( ( IDINTIFIER ( WS )* LPARN )=> functionCall ) | IDINTIFIER | ( LPARN ! expression RPARN !) );
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 19);
		TraceIn("atom", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NUMBER115 = default(CommonToken);
		CommonToken IDINTIFIER117 = default(CommonToken);
		CommonToken LPARN118 = default(CommonToken);
		CommonToken RPARN120 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> functionCall116 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression119 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NUMBER115_tree = default(CommonTree);
		CommonTree IDINTIFIER117_tree = default(CommonTree);
		CommonTree LPARN118_tree = default(CommonTree);
		CommonTree RPARN120_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(137, 1);
		try
		{
			// udfs.g3:137:5: ( NUMBER | ( ( IDINTIFIER ( WS )* LPARN )=> functionCall ) | IDINTIFIER | ( LPARN ! expression RPARN !) )
			int alt56=4;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt56 = 1;
				}
				break;
			case IDINTIFIER:
				{
				int LA56_2 = input.LA(2);

				if ((LA56_2==LPARN) && (EvaluatePredicate(synpred2_udfs_fragment)))
				{
					alt56 = 2;
				}
				else if ((LA56_2==EOF||(LA56_2>=CONST && LA56_2<=ELSE)||(LA56_2>=FUNCTION_DECL && LA56_2<=LBRCT)||LA56_2==NLINE||(LA56_2>=RBRCT && LA56_2<=RPARN)||(LA56_2>=WHILE && LA56_2<=37)))
				{
					alt56 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LPARN:
				{
				alt56 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// udfs.g3:138:2: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(138, 2);
				NUMBER115=(CommonToken)Match(input,NUMBER,Follow._NUMBER_in_atom905); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER115_tree = (CommonTree)adaptor.Create(NUMBER115);
				adaptor.AddChild(root_0, NUMBER115_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// udfs.g3:139:4: ( ( IDINTIFIER ( WS )* LPARN )=> functionCall )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(139, 4);
				// udfs.g3:139:4: ( ( IDINTIFIER ( WS )* LPARN )=> functionCall )
				DebugEnterAlt(1);
				// udfs.g3:139:5: ( IDINTIFIER ( WS )* LPARN )=> functionCall
				{
				DebugLocation(139, 31);
				PushFollow(Follow._functionCall_in_atom922);
				functionCall116=functionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionCall116.Tree);

				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// udfs.g3:140:4: IDINTIFIER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(140, 4);
				IDINTIFIER117=(CommonToken)Match(input,IDINTIFIER,Follow._IDINTIFIER_in_atom928); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDINTIFIER117_tree = (CommonTree)adaptor.Create(IDINTIFIER117);
				adaptor.AddChild(root_0, IDINTIFIER117_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// udfs.g3:141:4: ( LPARN ! expression RPARN !)
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(141, 4);
				// udfs.g3:141:4: ( LPARN ! expression RPARN !)
				DebugEnterAlt(1);
				// udfs.g3:141:5: LPARN ! expression RPARN !
				{
				DebugLocation(141, 10);
				LPARN118=(CommonToken)Match(input,LPARN,Follow._LPARN_in_atom934); if (state.failed) return retval;
				DebugLocation(141, 12);
				PushFollow(Follow._expression_in_atom937);
				expression119=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression119.Tree);
				DebugLocation(141, 28);
				RPARN120=(CommonToken)Match(input,RPARN,Follow._RPARN_in_atom939); if (state.failed) return retval;

				}


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 19);
			LeaveRule("atom", 19);
			LeaveRule_atom();
		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_functionCall();
	partial void LeaveRule_functionCall();
	// $ANTLR start "functionCall"
	// udfs.g3:144:1: functionCall : IDINTIFIER LPARN (i+= expression ( ( WS )* ',' ( WS )* i+= expression )* )? RPARN -> ^( IDINTIFIER LPARN ( $i)* ) ;
	[GrammarRule("functionCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> functionCall()
	{
		EnterRule_functionCall();
		EnterRule("functionCall", 20);
		TraceIn("functionCall", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDINTIFIER121 = default(CommonToken);
		CommonToken LPARN122 = default(CommonToken);
		CommonToken WS123 = default(CommonToken);
		CommonToken char_literal124 = default(CommonToken);
		CommonToken WS125 = default(CommonToken);
		CommonToken RPARN126 = default(CommonToken);
		List<CommonTree> list_i = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> i = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree IDINTIFIER121_tree = default(CommonTree);
		CommonTree LPARN122_tree = default(CommonTree);
		CommonTree WS123_tree = default(CommonTree);
		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree WS125_tree = default(CommonTree);
		CommonTree RPARN126_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDINTIFIER=new RewriteRuleITokenStream(adaptor,"token IDINTIFIER");
		RewriteRuleITokenStream stream_LPARN=new RewriteRuleITokenStream(adaptor,"token LPARN");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_27=new RewriteRuleITokenStream(adaptor,"token 27");
		RewriteRuleITokenStream stream_RPARN=new RewriteRuleITokenStream(adaptor,"token RPARN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "functionCall");
		DebugLocation(144, 1);
		try
		{
			// udfs.g3:144:13: ( IDINTIFIER LPARN (i+= expression ( ( WS )* ',' ( WS )* i+= expression )* )? RPARN -> ^( IDINTIFIER LPARN ( $i)* ) )
			DebugEnterAlt(1);
			// udfs.g3:145:2: IDINTIFIER LPARN (i+= expression ( ( WS )* ',' ( WS )* i+= expression )* )? RPARN
			{
			DebugLocation(145, 2);
			IDINTIFIER121=(CommonToken)Match(input,IDINTIFIER,Follow._IDINTIFIER_in_functionCall951); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDINTIFIER.Add(IDINTIFIER121);

			DebugLocation(145, 13);
			LPARN122=(CommonToken)Match(input,LPARN,Follow._LPARN_in_functionCall953); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPARN.Add(LPARN122);

			DebugLocation(146, 2);
			// udfs.g3:146:2: (i+= expression ( ( WS )* ',' ( WS )* i+= expression )* )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_1 = input.LA(1);

			if ((LA60_1==IDINTIFIER||LA60_1==LPARN||LA60_1==NUMBER))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// udfs.g3:146:3: i+= expression ( ( WS )* ',' ( WS )* i+= expression )*
				{
				DebugLocation(146, 4);
				PushFollow(Follow._expression_in_functionCall959);
				i=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(i.Tree);
				if (list_i==null) list_i=new List<CommonTree>();
				list_i.Add(i.Tree);

				DebugLocation(146, 17);
				// udfs.g3:146:17: ( ( WS )* ',' ( WS )* i+= expression )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, false);
					int LA59_1 = input.LA(1);

					if ((LA59_1==WS||LA59_1==27))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// udfs.g3:146:18: ( WS )* ',' ( WS )* i+= expression
						{
						DebugLocation(146, 18);
						// udfs.g3:146:18: ( WS )*
						try { DebugEnterSubRule(57);
						while (true)
						{
							int alt57=2;
							try { DebugEnterDecision(57, false);
							int LA57_1 = input.LA(1);

							if ((LA57_1==WS))
							{
								alt57 = 1;
							}


							} finally { DebugExitDecision(57); }
							switch ( alt57 )
							{
							case 1:
								DebugEnterAlt(1);
								// udfs.g3:146:18: WS
								{
								DebugLocation(146, 18);
								WS123=(CommonToken)Match(input,WS,Follow._WS_in_functionCall962); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS123);


								}
								break;

							default:
								goto loop57;
							}
						}

						loop57:
							;

						} finally { DebugExitSubRule(57); }

						DebugLocation(146, 22);
						char_literal124=(CommonToken)Match(input,27,Follow._27_in_functionCall965); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_27.Add(char_literal124);

						DebugLocation(146, 26);
						// udfs.g3:146:26: ( WS )*
						try { DebugEnterSubRule(58);
						while (true)
						{
							int alt58=2;
							try { DebugEnterDecision(58, false);
							int LA58_1 = input.LA(1);

							if ((LA58_1==WS))
							{
								alt58 = 1;
							}


							} finally { DebugExitDecision(58); }
							switch ( alt58 )
							{
							case 1:
								DebugEnterAlt(1);
								// udfs.g3:146:26: WS
								{
								DebugLocation(146, 26);
								WS125=(CommonToken)Match(input,WS,Follow._WS_in_functionCall967); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS125);


								}
								break;

							default:
								goto loop58;
							}
						}

						loop58:
							;

						} finally { DebugExitSubRule(58); }

						DebugLocation(146, 31);
						PushFollow(Follow._expression_in_functionCall972);
						i=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression.Add(i.Tree);
						if (list_i==null) list_i=new List<CommonTree>();
						list_i.Add(i.Tree);


						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }


				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(147, 2);
			RPARN126=(CommonToken)Match(input,RPARN,Follow._RPARN_in_functionCall979); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPARN.Add(RPARN126);



			{
			// AST REWRITE
			// elements: IDINTIFIER, LPARN, i
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: i
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
			root_0 = (CommonTree)adaptor.Nil();
			// 148:2: -> ^( IDINTIFIER LPARN ( $i)* )
			{
				DebugLocation(148, 5);
				// udfs.g3:148:5: ^( IDINTIFIER LPARN ( $i)* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(148, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_IDINTIFIER.NextNode(), root_1);

				DebugLocation(148, 18);
				adaptor.AddChild(root_1, stream_LPARN.NextNode());
				DebugLocation(148, 25);
				// udfs.g3:148:25: ( $i)*
				while ( stream_i.HasNext )
				{
					DebugLocation(148, 25);
					adaptor.AddChild(root_1, stream_i.NextTree());

				}
				stream_i.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionCall", 20);
			LeaveRule("functionCall", 20);
			LeaveRule_functionCall();
		}
		DebugLocation(149, 1);
		} finally { DebugExitRule(GrammarFileName, "functionCall"); }
		return retval;

	}
	// $ANTLR end "functionCall"

	partial void EnterRule_synpred1_udfs_fragment();
	partial void LeaveRule_synpred1_udfs_fragment();

	// $ANTLR start synpred1_udfs
	private void synpred1_udfs_fragment()
	{
		EnterRule_synpred1_udfs_fragment();
		EnterRule("synpred1_udfs_fragment", 21);
		TraceIn("synpred1_udfs_fragment", 21);
		try
		{
			// udfs.g3:72:2: ( LBRCT )
			DebugEnterAlt(1);
			// udfs.g3:72:3: LBRCT
			{
			DebugLocation(72, 3);
			Match(input,LBRCT,Follow._LBRCT_in_synpred1_udfs398); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_udfs_fragment", 21);
			LeaveRule("synpred1_udfs_fragment", 21);
			LeaveRule_synpred1_udfs_fragment();
		}
	}
	// $ANTLR end synpred1_udfs

	partial void EnterRule_synpred2_udfs_fragment();
	partial void LeaveRule_synpred2_udfs_fragment();

	// $ANTLR start synpred2_udfs
	private void synpred2_udfs_fragment()
	{
		EnterRule_synpred2_udfs_fragment();
		EnterRule("synpred2_udfs_fragment", 22);
		TraceIn("synpred2_udfs_fragment", 22);
		try
		{
			// udfs.g3:139:5: ( IDINTIFIER ( WS )* LPARN )
			DebugEnterAlt(1);
			// udfs.g3:139:6: IDINTIFIER ( WS )* LPARN
			{
			DebugLocation(139, 6);
			Match(input,IDINTIFIER,Follow._IDINTIFIER_in_synpred2_udfs912); if (state.failed) return;
			DebugLocation(139, 17);
			// udfs.g3:139:17: ( WS )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_1 = input.LA(1);

				if ((LA61_1==WS))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// udfs.g3:139:17: WS
					{
					DebugLocation(139, 17);
					Match(input,WS,Follow._WS_in_synpred2_udfs914); if (state.failed) return;

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(139, 21);
			Match(input,LPARN,Follow._LPARN_in_synpred2_udfs917); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_udfs_fragment", 22);
			LeaveRule("synpred2_udfs_fragment", 22);
			LeaveRule_synpred2_udfs_fragment();
		}
	}
	// $ANTLR end synpred2_udfs
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA5 dfa5;
	private DFA9 dfa9;
	private DFA28 dfa28;
	private DFA43 dfa43;
	private DFA47 dfa47;
	private DFA51 dfa51;
	private DFA55 dfa55;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5( this );
		dfa9 = new DFA9( this );
		dfa28 = new DFA28( this );
		dfa43 = new DFA43( this );
		dfa47 = new DFA47( this );
		dfa51 = new DFA51( this );
		dfa55 = new DFA55( this );
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x4\xFFFF";
		private const string DFA5_eofS =
			"\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA5_minS =
			"\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF";
		private const string DFA5_maxS =
			"\x1\x1B\x1\xFFFF\x1\x1B\x1\xFFFF";
		private const string DFA5_acceptS =
			"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1";
		private const string DFA5_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x1\x2\xFFFF\x2\x1\x4\xFFFF\x1\x1\x6\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				"\x1\x1\x2\xFFFF\x2\x1\x4\xFFFF\x1\x1\x6\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "()* loopback of 47:32: ( ( WS )* ',' ( WS )* i+= constDeclaration )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA9 : DFA
	{
		private const string DFA9_eotS =
			"\x4\xFFFF";
		private const string DFA9_eofS =
			"\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA9_minS =
			"\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF";
		private const string DFA9_maxS =
			"\x1\x1B\x1\xFFFF\x1\x1B\x1\xFFFF";
		private const string DFA9_acceptS =
			"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1";
		private const string DFA9_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA9_transitionS =
			{
				"\x1\x1\x2\xFFFF\x2\x1\x4\xFFFF\x1\x1\x6\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				"\x1\x1\x2\xFFFF\x2\x1\x4\xFFFF\x1\x1\x6\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				""
			};

		private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
		private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
		private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
		private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
		private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
		private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
		private static readonly short[][] DFA9_transition;

		static DFA9()
		{
			int numStates = DFA9_transitionS.Length;
			DFA9_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
			}
		}

		public DFA9( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}

		public override string Description { get { return "()* loopback of 52:27: ( ( WS )* ',' ( WS )* i+= IDINTIFIER )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA28 : DFA
	{
		private const string DFA28_eotS =
			"\x5\xFFFF";
		private const string DFA28_eofS =
			"\x5\xFFFF";
		private const string DFA28_minS =
			"\x2\xA\x2\xFFFF\x1\xA";
		private const string DFA28_maxS =
			"\x2\x1B\x2\xFFFF\x1\x1B";
		private const string DFA28_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA28_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA28_transitionS =
			{
				"\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1\x1\x5\xFFFF\x1"+
				"\x3",
				"\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1\x4\x5\xFFFF\x1"+
				"\x3",
				"",
				"",
				"\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1\x4\x5\xFFFF\x1"+
				"\x3"
			};

		private static readonly short[] DFA28_eot = DFA.UnpackEncodedString(DFA28_eotS);
		private static readonly short[] DFA28_eof = DFA.UnpackEncodedString(DFA28_eofS);
		private static readonly char[] DFA28_min = DFA.UnpackEncodedStringToUnsignedChars(DFA28_minS);
		private static readonly char[] DFA28_max = DFA.UnpackEncodedStringToUnsignedChars(DFA28_maxS);
		private static readonly short[] DFA28_accept = DFA.UnpackEncodedString(DFA28_acceptS);
		private static readonly short[] DFA28_special = DFA.UnpackEncodedString(DFA28_specialS);
		private static readonly short[][] DFA28_transition;

		static DFA28()
		{
			int numStates = DFA28_transitionS.Length;
			DFA28_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA28_transition[i] = DFA.UnpackEncodedString(DFA28_transitionS[i]);
			}
		}

		public DFA28( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 28;
			this.eot = DFA28_eot;
			this.eof = DFA28_eof;
			this.min = DFA28_min;
			this.max = DFA28_max;
			this.accept = DFA28_accept;
			this.special = DFA28_special;
			this.transition = DFA28_transition;
		}

		public override string Description { get { return "()* loopback of 87:24: ( ( WS )* ',' ( WS )* i+= IDINTIFIER )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA43 : DFA
	{
		private const string DFA43_eotS =
			"\x4\xFFFF";
		private const string DFA43_eofS =
			"\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA43_minS =
			"\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF";
		private const string DFA43_maxS =
			"\x1\x1E\x1\xFFFF\x1\x1E\x1\xFFFF";
		private const string DFA43_acceptS =
			"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1";
		private const string DFA43_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA43_transitionS =
			{
				"\x2\x1\x1\xFFFF\x5\x1\x1\xFFFF\x1\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1"+
				"\x2\x5\xFFFF\x1\x1\x2\xFFFF\x1\x3",
				"",
				"\x2\x1\x1\xFFFF\x5\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x1\x1\x1"+
				"\x2\x5\xFFFF\x1\x1\x2\xFFFF\x1\x3",
				""
			};

		private static readonly short[] DFA43_eot = DFA.UnpackEncodedString(DFA43_eotS);
		private static readonly short[] DFA43_eof = DFA.UnpackEncodedString(DFA43_eofS);
		private static readonly char[] DFA43_min = DFA.UnpackEncodedStringToUnsignedChars(DFA43_minS);
		private static readonly char[] DFA43_max = DFA.UnpackEncodedStringToUnsignedChars(DFA43_maxS);
		private static readonly short[] DFA43_accept = DFA.UnpackEncodedString(DFA43_acceptS);
		private static readonly short[] DFA43_special = DFA.UnpackEncodedString(DFA43_specialS);
		private static readonly short[][] DFA43_transition;

		static DFA43()
		{
			int numStates = DFA43_transitionS.Length;
			DFA43_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA43_transition[i] = DFA.UnpackEncodedString(DFA43_transitionS[i]);
			}
		}

		public DFA43( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 43;
			this.eot = DFA43_eot;
			this.eof = DFA43_eof;
			this.min = DFA43_min;
			this.max = DFA43_max;
			this.accept = DFA43_accept;
			this.special = DFA43_special;
			this.transition = DFA43_transition;
		}

		public override string Description { get { return "()* loopback of 124:14: ( ( WS )* ':=' ^ ( WS )* logicalExpr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA47 : DFA
	{
		private const string DFA47_eotS =
			"\x4\xFFFF";
		private const string DFA47_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA47_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA47_maxS =
			"\x2\x25\x2\xFFFF";
		private const string DFA47_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA47_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA47_transitionS =
			{
				"\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1"+
				"\x1\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x7\x3",
				"\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1"+
				"\x1\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x7\x3",
				"",
				""
			};

		private static readonly short[] DFA47_eot = DFA.UnpackEncodedString(DFA47_eotS);
		private static readonly short[] DFA47_eof = DFA.UnpackEncodedString(DFA47_eofS);
		private static readonly char[] DFA47_min = DFA.UnpackEncodedStringToUnsignedChars(DFA47_minS);
		private static readonly char[] DFA47_max = DFA.UnpackEncodedStringToUnsignedChars(DFA47_maxS);
		private static readonly short[] DFA47_accept = DFA.UnpackEncodedString(DFA47_acceptS);
		private static readonly short[] DFA47_special = DFA.UnpackEncodedString(DFA47_specialS);
		private static readonly short[][] DFA47_transition;

		static DFA47()
		{
			int numStates = DFA47_transitionS.Length;
			DFA47_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA47_transition[i] = DFA.UnpackEncodedString(DFA47_transitionS[i]);
			}
		}

		public DFA47( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 47;
			this.eot = DFA47_eot;
			this.eof = DFA47_eof;
			this.min = DFA47_min;
			this.max = DFA47_max;
			this.accept = DFA47_accept;
			this.special = DFA47_special;
			this.transition = DFA47_transition;
		}

		public override string Description { get { return "()* loopback of 128:13: ( ( WS )* ( '&' ^| '|' ^| '^' ^| '<' ^| '>' ^| '<=' ^| '>=' ^| '=' ^| '!=' ^) ( WS )* addSubExpr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA51 : DFA
	{
		private const string DFA51_eotS =
			"\x4\xFFFF";
		private const string DFA51_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA51_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA51_maxS =
			"\x2\x25\x2\xFFFF";
		private const string DFA51_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA51_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA51_transitionS =
			{
				"\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1"+
				"\x1\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\x2\x1\x3\x1\xFFFF\x8\x2",
				"\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1"+
				"\x1\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\x2\x1\x3\x1\xFFFF\x8\x2",
				"",
				""
			};

		private static readonly short[] DFA51_eot = DFA.UnpackEncodedString(DFA51_eotS);
		private static readonly short[] DFA51_eof = DFA.UnpackEncodedString(DFA51_eofS);
		private static readonly char[] DFA51_min = DFA.UnpackEncodedStringToUnsignedChars(DFA51_minS);
		private static readonly char[] DFA51_max = DFA.UnpackEncodedStringToUnsignedChars(DFA51_maxS);
		private static readonly short[] DFA51_accept = DFA.UnpackEncodedString(DFA51_acceptS);
		private static readonly short[] DFA51_special = DFA.UnpackEncodedString(DFA51_specialS);
		private static readonly short[][] DFA51_transition;

		static DFA51()
		{
			int numStates = DFA51_transitionS.Length;
			DFA51_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA51_transition[i] = DFA.UnpackEncodedString(DFA51_transitionS[i]);
			}
		}

		public DFA51( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 51;
			this.eot = DFA51_eot;
			this.eof = DFA51_eof;
			this.min = DFA51_min;
			this.max = DFA51_max;
			this.accept = DFA51_accept;
			this.special = DFA51_special;
			this.transition = DFA51_transition;
		}

		public override string Description { get { return "()* loopback of 132:19: ( ( WS )* ( '+' ^| '-' ^) ( WS )* multDivExpr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA55 : DFA
	{
		private const string DFA55_eotS =
			"\x4\xFFFF";
		private const string DFA55_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA55_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA55_maxS =
			"\x2\x25\x2\xFFFF";
		private const string DFA55_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA55_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA55_transitionS =
			{
				"\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1"+
				"\x1\x1\x2\x1\x3\x1\x2\x1\x3\x3\x2\x1\x3\x8\x2",
				"\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1"+
				"\x1\x1\x2\x1\x3\x1\x2\x1\x3\x3\x2\x1\x3\x8\x2",
				"",
				""
			};

		private static readonly short[] DFA55_eot = DFA.UnpackEncodedString(DFA55_eotS);
		private static readonly short[] DFA55_eof = DFA.UnpackEncodedString(DFA55_eofS);
		private static readonly char[] DFA55_min = DFA.UnpackEncodedStringToUnsignedChars(DFA55_minS);
		private static readonly char[] DFA55_max = DFA.UnpackEncodedStringToUnsignedChars(DFA55_maxS);
		private static readonly short[] DFA55_accept = DFA.UnpackEncodedString(DFA55_acceptS);
		private static readonly short[] DFA55_special = DFA.UnpackEncodedString(DFA55_specialS);
		private static readonly short[][] DFA55_transition;

		static DFA55()
		{
			int numStates = DFA55_transitionS.Length;
			DFA55_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA55_transition[i] = DFA.UnpackEncodedString(DFA55_transitionS[i]);
			}
		}

		public DFA55( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 55;
			this.eot = DFA55_eot;
			this.eof = DFA55_eof;
			this.min = DFA55_min;
			this.max = DFA55_max;
			this.accept = DFA55_accept;
			this.special = DFA55_special;
			this.transition = DFA55_transition;
		}

		public override string Description { get { return "()* loopback of 135:10: ( ( WS )* ( '*' ^| '/' ^| '%' ^) ( WS )* atom )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _constDeclarations_in_compileUnit163 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _globalDeclarations_in_compileUnit168 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _functionDeclaration_in_compileUnit173 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _WS_in_compileUnit178 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _NLINE_in_compileUnit183 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_compileUnit190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONST_in_constDeclarations200 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _WS_in_constDeclarations202 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _constDeclaration_in_constDeclarations207 = new BitSet(new ulong[]{0x8200002UL});
		public static readonly BitSet _WS_in_constDeclarations210 = new BitSet(new ulong[]{0x8200000UL});
		public static readonly BitSet _27_in_constDeclarations213 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _WS_in_constDeclarations215 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _constDeclaration_in_constDeclarations220 = new BitSet(new ulong[]{0x8200002UL});
		public static readonly BitSet _GLOBAL_in_globalDeclarations243 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _WS_in_globalDeclarations245 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _IDINTIFIER_in_globalDeclarations250 = new BitSet(new ulong[]{0x8200002UL});
		public static readonly BitSet _WS_in_globalDeclarations253 = new BitSet(new ulong[]{0x8200000UL});
		public static readonly BitSet _27_in_globalDeclarations256 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _WS_in_globalDeclarations258 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _IDINTIFIER_in_globalDeclarations263 = new BitSet(new ulong[]{0x8200002UL});
		public static readonly BitSet _IDINTIFIER_in_constDeclaration286 = new BitSet(new ulong[]{0x40200000UL});
		public static readonly BitSet _WS_in_constDeclaration288 = new BitSet(new ulong[]{0x40200000UL});
		public static readonly BitSet _30_in_constDeclaration291 = new BitSet(new ulong[]{0x208000UL});
		public static readonly BitSet _WS_in_constDeclaration293 = new BitSet(new ulong[]{0x208000UL});
		public static readonly BitSet _NUMBER_in_constDeclaration296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_DECL_in_functionDeclaration315 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _WS_in_functionDeclaration317 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _IDINTIFIER_in_functionDeclaration320 = new BitSet(new ulong[]{0x202000UL});
		public static readonly BitSet _WS_in_functionDeclaration322 = new BitSet(new ulong[]{0x202000UL});
		public static readonly BitSet _LPARN_in_functionDeclaration326 = new BitSet(new ulong[]{0x240400UL});
		public static readonly BitSet _WS_in_functionDeclaration329 = new BitSet(new ulong[]{0x240400UL});
		public static readonly BitSet _IDINTIFIER_in_functionDeclaration335 = new BitSet(new ulong[]{0x8240000UL});
		public static readonly BitSet _WS_in_functionDeclaration338 = new BitSet(new ulong[]{0x8200000UL});
		public static readonly BitSet _27_in_functionDeclaration341 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _WS_in_functionDeclaration343 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _IDINTIFIER_in_functionDeclaration348 = new BitSet(new ulong[]{0x8240000UL});
		public static readonly BitSet _RPARN_in_functionDeclaration355 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _WS_in_functionDeclaration359 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _NLINE_in_functionDeclaration363 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _blockStatement_in_functionDeclaration368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_blockStatement403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRCT_in_block418 = new BitSet(new ulong[]{0x3B4C00UL});
		public static readonly BitSet _WS_in_block423 = new BitSet(new ulong[]{0x3B4C00UL});
		public static readonly BitSet _NLINE_in_block427 = new BitSet(new ulong[]{0x3B4C00UL});
		public static readonly BitSet _varDeclarations_in_block432 = new BitSet(new ulong[]{0x334C00UL});
		public static readonly BitSet _WS_in_block438 = new BitSet(new ulong[]{0x334C00UL});
		public static readonly BitSet _NLINE_in_block442 = new BitSet(new ulong[]{0x334C00UL});
		public static readonly BitSet _statement_in_block450 = new BitSet(new ulong[]{0x334C00UL});
		public static readonly BitSet _WS_in_block454 = new BitSet(new ulong[]{0x334C00UL});
		public static readonly BitSet _NLINE_in_block458 = new BitSet(new ulong[]{0x334C00UL});
		public static readonly BitSet _RBRCT_in_block463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_varDeclarations489 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _WS_in_varDeclarations491 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _IDINTIFIER_in_varDeclarations496 = new BitSet(new ulong[]{0x8200002UL});
		public static readonly BitSet _WS_in_varDeclarations499 = new BitSet(new ulong[]{0x8200000UL});
		public static readonly BitSet _27_in_varDeclarations502 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _WS_in_varDeclarations504 = new BitSet(new ulong[]{0x200400UL});
		public static readonly BitSet _IDINTIFIER_in_varDeclarations509 = new BitSet(new ulong[]{0x8200002UL});
		public static readonly BitSet _assignment_in_statement532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileLoop_in_statement537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statement542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _resultisStatement_in_statement547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RET_in_resultisStatement557 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _WS_in_resultisStatement559 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _expression_in_resultisStatement562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDINTIFIER_in_assignment581 = new BitSet(new ulong[]{0x40200000UL});
		public static readonly BitSet _WS_in_assignment583 = new BitSet(new ulong[]{0x40200000UL});
		public static readonly BitSet _30_in_assignment586 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _WS_in_assignment588 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _expression_in_assignment591 = new BitSet(new ulong[]{0x204000UL});
		public static readonly BitSet _WS_in_assignment594 = new BitSet(new ulong[]{0x204000UL});
		public static readonly BitSet _NLINE_in_assignment597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileLoop618 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _WS_in_whileLoop620 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _expression_in_whileLoop623 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _WS_in_whileLoop626 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _NLINE_in_whileLoop630 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _blockStatement_in_whileLoop634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_ifStatement655 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _WS_in_ifStatement657 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _expression_in_ifStatement660 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _WS_in_ifStatement663 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _NLINE_in_ifStatement667 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _blockStatement_in_ifStatement671 = new BitSet(new ulong[]{0x204042UL});
		public static readonly BitSet _WS_in_ifStatement674 = new BitSet(new ulong[]{0x204042UL});
		public static readonly BitSet _NLINE_in_ifStatement678 = new BitSet(new ulong[]{0x204042UL});
		public static readonly BitSet _elseStatement_in_ifStatement682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_elseStatement707 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _WS_in_elseStatement710 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _NLINE_in_elseStatement714 = new BitSet(new ulong[]{0x325C00UL});
		public static readonly BitSet _blockStatement_in_elseStatement718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalExpr_in_expression738 = new BitSet(new ulong[]{0x40200002UL});
		public static readonly BitSet _WS_in_expression741 = new BitSet(new ulong[]{0x40200000UL});
		public static readonly BitSet _30_in_expression744 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _WS_in_expression747 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _logicalExpr_in_expression750 = new BitSet(new ulong[]{0x40200002UL});
		public static readonly BitSet _addSubExpr_in_logicalExpr763 = new BitSet(new ulong[]{0x3F81600002UL});
		public static readonly BitSet _WS_in_logicalExpr766 = new BitSet(new ulong[]{0x3F81600000UL});
		public static readonly BitSet _24_in_logicalExpr771 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _37_in_logicalExpr776 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _36_in_logicalExpr781 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _31_in_logicalExpr786 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _34_in_logicalExpr791 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _32_in_logicalExpr796 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _35_in_logicalExpr801 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _33_in_logicalExpr806 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _22_in_logicalExpr811 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _WS_in_logicalExpr816 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _addSubExpr_in_logicalExpr819 = new BitSet(new ulong[]{0x3F81600002UL});
		public static readonly BitSet _multDivExpr_in_addSubExpr835 = new BitSet(new ulong[]{0x14200002UL});
		public static readonly BitSet _WS_in_addSubExpr838 = new BitSet(new ulong[]{0x14200000UL});
		public static readonly BitSet _26_in_addSubExpr843 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _28_in_addSubExpr848 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _WS_in_addSubExpr853 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _multDivExpr_in_addSubExpr856 = new BitSet(new ulong[]{0x14200002UL});
		public static readonly BitSet _atom_in_multDivExpr869 = new BitSet(new ulong[]{0x22A00002UL});
		public static readonly BitSet _WS_in_multDivExpr872 = new BitSet(new ulong[]{0x22A00000UL});
		public static readonly BitSet _25_in_multDivExpr877 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _29_in_multDivExpr882 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _23_in_multDivExpr887 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _WS_in_multDivExpr892 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _atom_in_multDivExpr895 = new BitSet(new ulong[]{0x22A00002UL});
		public static readonly BitSet _NUMBER_in_atom905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_atom922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDINTIFIER_in_atom928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPARN_in_atom934 = new BitSet(new ulong[]{0xA400UL});
		public static readonly BitSet _expression_in_atom937 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _RPARN_in_atom939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDINTIFIER_in_functionCall951 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _LPARN_in_functionCall953 = new BitSet(new ulong[]{0x4A400UL});
		public static readonly BitSet _expression_in_functionCall959 = new BitSet(new ulong[]{0x8240000UL});
		public static readonly BitSet _WS_in_functionCall962 = new BitSet(new ulong[]{0x8200000UL});
		public static readonly BitSet _27_in_functionCall965 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _WS_in_functionCall967 = new BitSet(new ulong[]{0x20A400UL});
		public static readonly BitSet _expression_in_functionCall972 = new BitSet(new ulong[]{0x8240000UL});
		public static readonly BitSet _RPARN_in_functionCall979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRCT_in_synpred1_udfs398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDINTIFIER_in_synpred2_udfs912 = new BitSet(new ulong[]{0x202000UL});
		public static readonly BitSet _WS_in_synpred2_udfs914 = new BitSet(new ulong[]{0x202000UL});
		public static readonly BitSet _LPARN_in_synpred2_udfs917 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace Sketcher.Udfs.Parser
